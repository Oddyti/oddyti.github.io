[{"content":"个人向的歌曲推荐视频——第二期！（希望能有第三期，具体初衷可以看看第一期\n本期更新：优化了排版，增加了字幕\n每期一共十首音乐，包含的风格很多，由于时长原因，每一首会剪出一到两部分片段，但是如果喜欢的话，仍然推荐去听整曲，甚至整张专辑。\n","date":"2023-03-31T21:16:48+08:00","permalink":"https://oddyti.com/post/music-share-02/","title":"歌荒拯救计划 | 个人向推歌 - 第二期"},{"content":"像素画新人，第三次像素画尝试，画童年喜欢玩的极品飞车9的经典主角座驾，怀念下这款神作。 初学像素画，如有不足欢迎指教！\n原图链接: https://pan.baidu.com/s/1UtJbPQbqzzR7qwo5N9mz5w?pwd=bwqp 提取码: bwqp\n","date":"2023-05-11T20:21:50+08:00","image":"https://oddyti.com/post/pixel-art-m3/bmw-m3_2_hu16401966575501052322.png","permalink":"https://oddyti.com/post/pixel-art-m3/","title":"记录一次像素画尝试：BMW M3 E46"},{"content":"焦点 Highlight 一刹那/的闪烁/ 电光火石的映照/\n哪怕略显软弱-削减不了那份劲爆-\n胜过白昼下的烂漫/\n或黑夜里的灿烂/\n对比眼中的暗淡不禁给予几分赞叹/\n感染着周围气氛是逐渐散开的光晕/\n缓缓的透射着如同花蕾绽开的刚硬/\n在燃烧之前也经历过寒与火的锻造/\n如今完全的释放是给你和我的暗号/\n这世态炎凉的城市-画/面有点僻静-\n像/下过暴雨之后留下/ 冷漠的意境\n用信手捏来的文字-划/破夜空寂静-\n在画/龙点睛之后的话/语出自即兴/\n饶舌界的健将/思想充满着电量/\n就好比光让世界变亮/的自然现象\n字里行间的奥妙/过滤了岸然道貌/\n创造着亮点的我们同样被亮点照耀\nI need you all close your eyes and here we go\n我们是 highlight and now you know\n号角响起了 扬旗耀武还等什么\n亮点是我们 两眼是抢眼的光\nI need you all close your eyes and here we go\n我们是 highlight and now you know\n号角响起了 扬旗/耀武还等什么\n亮点是我们 两眼是抢眼的光\n身为城市里的 highlight/\n受着信徒的爱戴/\n但发光的不是我外在/\n他们相信-因为改变/使我们带来-\n当黑夜将近-光芒乍泄/当我们上台-\n是表~演这日日夜夜锻炼的字句/\n是呼喊着口号-渐渐重建的秩序/\n是沈住气/慢慢超越言党的进度-\n来到你的面前-\n我们已经相信这是艺术/\n站上制高点~-蜜蜂展翅的强壮/\n背后衬着一零一/大楼反射的阳光\n黄色的东方脸孔-西洋装扮/\n我让中文饶舌像~史诗一样浪漫\n要成熟-当灵感撕裂脑、部疼痛\n要奋斗 让事业起飞脚、步腾空\n要成为可见不可及的亮点/\n燃烧后能成功/\n穿越几千几百万光年\nI need you all close your eyes and here we go\n我们是 highlight and now you know\n号角响起了 扬旗耀武还等什么\n亮点是我们 两眼是抢眼的光\nI need you all close your eyes and here we go\n我们是 highlight and now you know\n号角响起了 扬旗耀武还等什么\n亮点是我们 两眼是抢眼的光\nDiamond in the rough 他们拒绝被雕琢-\n区别于他人/取决于/他们那叫做-\n地下的血统/雄言是他们说的/\nI never knew a love - love like this 是 common 说的-\n从这里/他们 flip a page 对事/\n重新做考估/难免有分歧或对峙/\n面对舆论的雨点-\n他们未曾选择忍耐/\n未展开的局面-也未、曾选择等待/\n漂泊在城市的角落-\n光点/稍纵后即逝-\n都记录在敲锣打鼓-小鼓交错的 beats/\n想要叫座的 verse 一语道破/爆破的 flow-\n只能找我、们-这是挑衅的意、思/\n播下了火种、是为了星火、燎原-\n也曾有零落/火花淍谢火苗被浇灭/\n他们紧握、或挥笔/驰骋在文字疆界/\n苦海明灯是他们眼里燃烧的亮点\nI need you all close your eyes and here we go\n我们是 highlight and now you know\n号角响起了 扬旗耀武还等什么\n亮点是我们 两眼是抢眼的光\nI need you all close your eyes and here we go\nAnd we don\u0026rsquo;t know now you know\n号角响起了 扬旗耀武还等什么\n亮点是我们 两眼是抢眼的光\nI need you all close your eyes and here we go\n我们是 highlight and now you know\nAnd now you know\n号角响起了 扬旗耀武还等什么\n亮点是我们 两眼是抢眼的光\nI need you all close your eyes and here we go\n我们是 highlight and now you know\n号角响起了 扬旗耀武还等什么\n亮点是我们 两眼是抢眼的光\nYeah\n","date":"2024-10-18T09:57:44+08:00","permalink":"https://oddyti.com/post/%E4%B8%80%E4%BA%9B%E6%AD%8C%E8%AF%8D/","title":"一些歌词"},{"content":" 你做过的最离谱的梦是什么？\n描写一下你灵魂的形状。\n用四个词形容你的初恋。\n你的人生座右铭是什么？\n虚构一个古代英雄人物，叙述你和他生活一天的故事。\n打开窗户往外看，你能看到什么，听到什么？\n作为美术馆的策展人，为我们描述其中的一个展览。\n你走进一家餐厅吃饭，发现角落里坐着一个你最讨厌的人。用第一人称写下你取食物和找座位时脑海中的想法。\n借用上述的背景，把自己想象成你最讨厌的那个人，进入他的大脑，描写他看到你进来时的想法。\n一觉醒来，发现自己回到了2000年的第一天，你会如何度过？\n把你的一生写成一部小说，书名应该叫什么？说说原因。\n如果牛顿来21世纪生活一个星期，最让他感到新奇的会是什么？\n给你35岁的好友写一则创意网络相亲文案。你的好友背景是：“985”硕士，上市互联网公司中层管理人员，年薪80万，在大城市有房有车。\n观察你的身体部位，它们长得像什么？尝试为它们写五个明喻句。\n写一首诗，第一行是：“假如我是一座小岛”。\n从你读过的文学作品中，选择一个可悲可叹的人物，简述这个人物形象。\n一个犯罪分子实施了一次公寓抢劫或一次绑架或一次谋杀。从他的视角把事件经过写出来。（三者任选其一）\n在马路边遇到一个号啕大哭的孩子，你认为他刚刚经历过什么？\n五百年后，地球毁灭了，新的物种诞生。新的物种发现了人类遗留下的最后一卷录音带，你觉得里面录了什么？\n以最少的字讲一个故事。\n列出十二种冰淇淋的味道。\n你去年夏天做了什么？\n描述一个你讨厌的人的优点。\n描述你家方圆一百公里之内一个好玩的地方。\n大象旅行时捡到了一盏神灯，它会许下什么心愿？\n选择任意一件物品跟你一起进入时间循环，你会选什么？会发生什么故事？\n为一个充满幽默感的可爱老人写一封讣告。\n展开想象，描述以下场景：某一天早上，你睡眼惺忪地起床，打开门，门外正站着某个名人。\n写一封给“青春”的情书。\n描述你人最爽的一次经历。\n你喜欢的作家或歌手是谁？他们身上有哪些吸引你的地方？\n死神来了，但你还不想死，你如何说服他别带走自己？\n一个40多岁的女人离婚了，来到一座小城重新生活。你觉得她过往的人生中发生过什么故事？\n描写你离死亡很近的一次经历，那时你正在想什么？\n令你印象深刻的电影台词是什么？\n你小时候撒过的最失败的谎言是什么？\n你的名字背后有着怎样的故事？\n说说你微博名的由来和故事。\n吐槽一下生活中那些让你深恶痛绝的设计。\n以“凌晨四点，我接到一个电话”为开头写一则短故事。\n一个从35层跳楼轻生的人，在半空中是否会后悔？为什么？\n如果为人父母也需要考试，你觉得会考哪些科目？\n朋友深夜来访，看起来十分颓废。之前他发生了什么？\n写一个你听过或亲身经历过的灵异事件，结局要出人意料。\n长久以来，国宝一直居住在博物馆里，一天，国宝们决定外出游历。国宝们在游历的过程中，遇见了不同的人类和动植物，收获了美好的回忆。以此为背景写一则小故事，要求国宝有独特的性格特点。\n描述你生活中最舒适的时刻。\n描述你人生中最困难的时刻。\n描写你待过的某个房间。\n你的影子看起来是什么样子的？\n坐在你身旁的那个人突然变成丧尸，之后会发生什么？\n描述未来科技界的一项重大发明以及它是如何改变世界的。\n分别用一首歌的名字来形容你的父亲、你的母亲和你最好的朋友。\n最近看的一本书的第十二页的第六句话是什么？\n讲一个你知道的冷知识。\n描写昨天做的一件小事。\n公司团建时，你和领导、同事被困在一座孤岛上，会发生什么？\n以“早上醒来，忽然发现自己转换了性别”为主题写一个故事。\n你吃过的最难吃的食物是什么？\n你吃过哪些好吃的食物？\n描写一家深夜酒馆。\n描写突如其来的闪电。\n写一个短篇幻想故事，内容是15岁的你、20岁的你和25岁的你一起去游乐场。\n给一百年后的人类留言。\n现在所待的城市有哪些让你好奇的地方？描述一下这些地方。\n假如你可以把《山海经》里的一个生物带回家，你会选择带哪一个？为什么？\n最让你快乐的一件事是什么？\n最让你遗憾的一件事是什么？\n你理想中的宠物具有哪些特征？\n爷爷奶奶的兴趣爱好是什么？\n回想一个你熟悉的人，列出他的性格特征。\n给你一次重新选择人生的机会，你想成为什么样的人？为什么？\n你正和你的朋友走在拥挤的街道上，然后你的朋友开始慢慢地改变形状。请描述一下，你的朋友变成了什么？接下来又发生了什么事？\n对于人类未来命运，你有着怎样的幻想？\n记录下你喜欢的日子，在那天发生了什么特别的事情？\n以明朝为背景，写一个短篇故事，翡翠对剧情的推动起到关键作用。\n一个独自走在街上的人正在想什么？\n你和同桌之间发生过最甜蜜的事情是什么？\n看完这行字的一瞬，家里有什么发生了？\n关于“荷马式英雄”，你有什么理解或认识？\n假如你可以拥有一对翅膀，你想拥有什么样的？请用文字描述。\n只能带十块钱穿越到未来，怎样才能混得风生水起？\n描述你理想中的退休生活。\n让现在的你陪小时候的你长大，接下来会发生什么？\n一个正常人被陷害关进精神病院，他要如何证明自己没有患病？\n给读者推荐五本经典文学作品，各写一百字的推荐语。\n你不为人知的秘密是什么？\n为临期商品店写一则广告语。\n食物如果有思维能力，为了避免被吃掉，它会怎么做？\n吐槽一部你看过的最糟糕的电影。\n介绍陪伴你童年的三部动画片。\n从小到大，你被起过什么外号？它们是怎么得来的？\n你最喜欢妈妈做的哪一道菜？为什么？\n用三个词描述你的童年。\n你珍藏的一张照片有着怎样的故事？\n过年回家，面对亲戚安排的相亲，如何礼貌而不尴尬地回绝？\n艺术馆着火了，你会救一幅名画，还是会救一只猫？为什么？\n你小时候有哪些天赋长大后却消失了？\n学生时代喜欢的那个人，现在怎么样了？\n描述你今天看到的云。\n描述今晚的夜色。\n描述自己的十个优点。\n描述自己的十个缺点。\n用鲁迅先生的口吻，写一封辞职信。\n当人生跌入低谷时，你会怎么办？\n请描写理性与感性、独立与羁绊之间的矛盾。\n如果你与一位艺术家一起居家隔离一个月，描述一下你们的日常。\n“结婚当天，新娘反悔了。”请续写后面的故事。\n如果人类只能留下一块石碑，你觉得上面应该刻什么？\n以“现在是2022年，我是来自2077年的穿越者”为开头，写一个故事。\n你的墓志铭是什么？\n描述你家厨房里的某个物品。\n对你现今生活影响至深的三大发明是什么？\n谈谈《红楼梦》中贾宝玉的形象。\n以外星人的视角叙述居住在地球上的心得与体会。\n假如秦始皇和李世民同在一个时空，以治国谋略与军事才能为标准，谁更胜一筹？为什么？\n“春江潮水连海平，海上明月共潮生。”选择其中一句作为核心意象，创作一个短故事。\n以“我有一种超能力”为开头，写一个故事。\n以一个学生的视角，谈谈对“打工人”这一称呼的感悟。\n你的宠物猫趴在窗户边，眼里蓄满了泪水，它在想什么？\n一天，老爸回来神神秘秘地告诉你，他车间值夜班的工人都在议论一件事。工人们在议论什么？\n同学聚会上，你遇到了曾经喜欢的那个人，并且对方还是单身。描述事情发展的四种可能。\n想象自己是某种会跑会跳的事物，清晰地描述它。\n你会隐身术，但只能隐身三天，你会做什么？\n如果可以改变身上的某一个部位，你希望这个部位是哪里？为什么？\n你想进入谁的梦境？为什么？\n你想回到过去改变哪件事？\n写一段即兴说唱词。\n记录一段他乡遇故知的经历。\n临近高考，有位同学想要放弃，怎样劝他打消这个念头？\n为一个很火的吐槽节目撰写一段文案，言辞要犀利。\n选一种最能代表你性格的动物，描述此动物。\n你有一天的闲暇时间，规划一下该怎么度过。\n假如你是一名教师，如何看待学生早恋？\n试着写一副极具创意的对联。\n盛赞你最爱的食物。\n不提雪字，描述一下雪很大的场景。\n列举五种特别的解压方式。\n向盲人描述红色。\n向盲人描述蓝色。\n向盲人描述粉色。\n以第三人称限知视角写一则故事，对话里要有“别再自欺欺人了，那件事你压根不后悔”。\n以“罗生门”为主题，写一个看似荒诞但又在情理之中的故事。\n如果有一天，你出现在自己最喜欢的作家笔下，你希望以什么样的形象出场？\n你希望的人生结局是什么？\n你最喜欢的娱乐项目是什么？\n电影对你而言，意味着什么？\n音乐对你而言，意味着什么？\n对平行世界的你说些什么吧。\n梦到被人追杀，追杀你的人是谁？梦里发生了什么？\n你发现自己无意间成了通缉犯，你该怎么办？\n描述一次比想象中勇敢的经历。\n描述一次久别重逢的经历。\n描述你最真实的择偶标准。\n记述生活中让你怦然心动的时刻。\n用一百五十字写一个搞笑又有深意的故事。\n他人眼中的你与真实的自己有何区别？\n金庸小说中，你最想成为哪个人物？为什么？你和这个人的差距在哪儿？\n一对青年男女在火车上一见钟情，但下一站两人就要分别。男生想说服女生一起下车，他如何将自己疯狂的想法告诉女生？\n你是一只宠物猪，评价一下你的主人。\n找一处舒适的地方，观察四周，然后把你看到的和听到的东西写下来。\n对单恋你的人说点儿什么。\n描述一下你最近的学习/工作状态。\n下雨天你最喜欢做的事情是什么？\n下雪天你最喜欢做的事情是什么？\n《西游记》里的妖怪，你最害怕哪一个？为什么？\n写一段文字，介绍你曾经游览过的一座公园或建筑。\n如果有一天，我们身边的物品会说话，生活将会变成什么样？\n描述你生活中经历过的小概率事件。\n你最喜欢的一句诗是什么？为什么？\n怀疑身边有人给自己投毒，但你没有证据，你该怎么办？\n和一群陌生人度过一个周末，你们会做些什么？\n你会因为什么删除社交平台上的好友？\n描述一下，到目前为止，你花过的最值得/最不值得的一笔钱。\n选择一个短篇故事，读完开篇，发挥你的想象，根据开篇情节续写故事。\n假如每个人都可以按键复活一个爱的人，你会复活谁？\n如果有人向你最好的朋友打听你的缺点，你认为他会怎么说？\n你理想中的公交车有什么功能？\n你的购物车里有什么？\n列一份清单，写下你的朋友做过什么奇奇怪怪的事。\n一个你绝对想不到的人要在情人节和你告白，这个人会是谁？\n用三种不同的方式表述“天气很冷”。\n以“一个心口不一的人”为主题，写一篇文章。\n向一个来地球访问的外星人介绍你是谁。\n以“轮船”“海湾”“风”为关键词，即兴创作一篇微小说。\n描写生活中的小惊喜。\n你会如何处理你的数字遗产？\n你后悔没有早点知道的道理是什么？\n未来五年，你的规划是什么？\n回到初三开学前的那个暑假，写一写发生了什么。\n如果你目睹校园欺凌事件，你会怎样做？\n不经意间，你曾看到过什么不该看到的事情？\n接到一个诈骗电话，你会怎么回应？写下你们之间的对话。\n文学作品中，让你印象深刻的结尾是什么？\n你认为在别人眼里，满分十分的话你能得几分，为什么？\n回想你与别人起的一次争论，那次你认为对方明显是错的。现在，站在对方的角度上给自己写一封信。\n描述一个你感兴趣的科学领域。\n你小时候干过最牛的事情是什么？\n父母当着孩子的面争吵时，孩子心里在想什么？\n用十种不同的方式表达“我爱你”。\n下午六点下班，领导下班前两分钟在群里发消息说六点半开会，而你刚好那时有个重要的约会。用五种不同的方式回复领导。\n身家千亿的总裁在演讲会上当众被泼水，从围观群众的角度来描述这件事。\n一个多年未联系的朋友突然给你发了一句“山有木兮木有枝，心悦君兮君不知”，你会用什么古诗来拒绝对方？\n有一天，你不经意间在你的室友枕头下发现了一把水果刀。以此为开头展开叙述。\n假如爱迪生没有发明电灯，世界将会变成什么样子？\n你喜欢的明星是谁？为什么？\n你喜欢的书是什么？为什么？\n你喜欢的电影是什么？为什么？\n你喜欢的植物是什么？为什么？\n以孩子的口吻来描述一场暴风雨。\n如果当初________，你现在会怎样？（请先补全题目，然后作答）\n给你的灵魂伴侣写一封信。\n就上一封信，写一封回信。\n记述一下你上一次发自内心的快乐。\n你最近一次哭是因为什么？\n描述你最惨的一次经历。\n一百年后的地球是什么样子的？\n简单描述普通人的一生。\n你和父母的相处模式是怎样的？\n哪一种味道最能代表夏天？为什么？\n你做过的最愚蠢的事情是什么？\n一天后就是儿童节，即将小学毕业的你打算怎么度过？\n你最想和谁交换身份（人生）？为什么？\n描述你的初中班主任。\n描述太空。\n为学校/单位春晚创作一段相声。\n你在工作中犯过的最大的错误是什么？\n与陌生人互寄明信片，你会写什么？\n毕业或搬家，你最舍不得丢的东西是什么？写出保留它的理由。\n你正在一家餐厅吃饭，形容一下餐厅外面的天空，外面都有什么人、车经过？\n以“春天”“玫瑰”“礼物”为关键词写一个故事。\n如何搭讪一个文学爱好者？\n如何搭讪一位建筑师？\n如何搭讪一个摇滚爱好者？\n怎么快速、合法地挣到一百万元？\n设置一个场景，在场景中展示人物的性格特征。尝试通过对话、动作和细节来表现他们。\n明年的今天你会在哪里，做什么？\n为喜欢户外运动的“驴友”或探险者撰写一份野外求生指南。\n你想把什么项目加入奥运会？为什么？\n文学作品中，最令你印象深刻的角色是什么？描述该角色的特点。\n用一段文字，向一位老奶奶介绍什么是微信“朋友圈”。\n描述一次去游乐园时的惨痛经历。\n描写一个梦境，或改编一个童话故事，让它就像真实发生的一样，但是不可以出现“我突然醒来”。\n描述一下惊艳到你的中国地名。\n描述一下你喜欢的航天员。\n分享一下你的奇思妙想。\n描述你身边很酷的一个人。\n获得诺贝尔文学奖后，你的获奖感言是什么？\n描述你最骄傲的时刻。\n描述你最喜欢的综艺节目。\n哪一个瞬间让你觉得世事尽可原谅？\n如果时间多出来一天，你最想做的事情是什么？\n讲一个悲伤的冷笑话，然后写进故事里。\n秋天的第一片落叶正在飘落，从落叶的角度描述它所见到的树。\n什么东西在某些方面会让你联想到自己？它可以是任何东西。用一两个句子描述你像什么，以及你为什么像这个东西。\n你和宠物流落街头，该如何填饱肚子？\n知名设计师与艺术家一起出来摆地摊，他们会卖什么？会写什么宣传语？\n有哪些让你感觉安全的地方？\n如果上帝是个女孩，会怎样？\n描述一件你希望永远都能穿的衣服。\n你会怎样描述“意难平”？\n设置一个场景，没有任何动作描写，只利用对话来渲染气氛。现在，一边听着喜欢的音乐，一边写下你想象的场景。\n把刚才创作的对话重新创作一次，这一次你要听着你不喜欢的音乐。看看这两次对话有什么不一样的地方。\n选择一件你童年时代印象深刻的事情，写下来。\n用第三人称、现在时态，改写上一条你的回忆。\n你的第一份工作是什么样的？\n想象一下，一个生活在几百年前的人，他闲暇时喜欢做什么？\n如果他被邀请来到现在参加宴会，他想吃些什么？\n续写《边城》，以“这个人也许永远不回来了”为结尾，续写内容和前文风格一致。\n花十分钟，写出杯子与苍蝇有哪些相似的地方。\n哪一个瞬间让你真切地感受到科学技术给生活带来的巨大变化？\n林先生是一家上市公司的老总。一天清晨，他一个人在公园里锻炼身体。突然从路边的树丛中闪现出一位妙龄女子，拦住他的去路。展开你的想象，描述他们接下来的对话。（女子身份为杀手）\n结合自己的经历和感受，谈谈文学的作用。\n偶像的价值是什么？\n写一种糟糕的追求异性的方式。\n用一种水果形容你喜欢的人。\n给自己写一个小传。\n如果银行给你账户上错打了12亿元，你会怎么做？\n地球上将增加一个新物种，你觉得会是什么样的生物？\n你会怎样度过孤独的时刻？\n一个人的妻子离家出走了，留下了一封信。信里写了什么？\n面试中，发现面试官是自己曾经的同学，描述你们接下来的谈话。\n联欢晚会上临时被要求表演节目，但是你没有什么特殊才艺，你该如何化解尴尬？\n如何证明自己活了一万四千年？\n如果《神奇动物在哪里》的故事发生在中国，请描述一个有意思的情节。\n《红楼梦》中，最让你意难平的人物是谁？为什么？\n去年世界有哪些惊人的改变？\n人工智能带来的好处有哪些？\n描写一次让你记忆深刻的面试经历。\n描写一次看病的经历。\n给你最喜爱的作家写一封信，跟他探讨一个你关心的文学问题。\n印象中，你的老师做过什么让你大跌眼镜的事情？\n如果古人也有朋友圈，他们会发什么？\n描述你人生中的第一笔收入，以及用处。\n作为公司的高管，描写一下你每天的行程安排。\n有个人独自坐在公园的长椅上，这个人在想什么？\n写一段与星空的对话。\n描写一个刚出生的婴儿。\n描述你最好朋友的样子。\n向日葵晚上在干什么？\n如果植物有意识，它在想什么？\n脱单后你要做的第一件事是什么？\n如何对抗生活中的坏情绪？\n十年后的手机长什么样子？\n如果可以在一年中加一个节日，你最想设定什么节日？\n如果可以选择性别，你想成为男生还是女生？为什么？\n你手机相册里笑得最开心的那个人是谁？你们有着怎样的故事？\n你上次走进电影院是什么时候？\n你听过的最动人的情话是什么？\n你心目中的十大好片是哪些？\n你心目中的十大烂片是哪些？\n与自己同名的人相处是一种怎样的体验？\n科幻作品中有哪些颠覆你的脑洞、设定或创意，为什么？\n用三种不同的颜色来描述昨天的你、今天的你和明天的你。\n你送过或收到过什么特别的礼物？\n不考虑薪水、尊严和面子，你最想从事的工作是什么？为什么？\n给小时候的自己打一通电话，你会说什么？\n扮演好一名圣诞老人需要学习什么技能？为什么？\n为你家乡冬天的风景写一个片段，抓住其主要特点。\n你是如何缓解焦虑的？\n描述你被动物欺负的一次经历。\n如果你和另一个自己相遇，会发生什么？\n描述最令你感动的文学片段。\n你单身二十年，写一封信投诉月老。\n如果你能够穿越到古代且有能力带一个人回来，你会选择带谁？世界会发生什么改变？\n你的朋友告诉你，他被困在同一天，你要怎样帮助他跳出时间循环？\n以讲解员的身份，向参观者介绍梵高的《星月夜》这幅作品。\n写下你对明年的期许。\n想象一下情侣第一次约会的场景，写下来。\n一个你讨厌的人苦苦追求你，你会怎么办？\n写出五件可能让你感到恐慌的事情。\n给新入行的同行写一封信。\n描述一个你每天见到的人。\n描述一个素未谋面的人。\n你会如何书写秋天？\n为你的好友写一首藏头诗。\n撰写一份遗嘱，内容包含有形财产清单、无形财产清单、心愿清单。\n你的书架上有哪些书？\n写下此时此刻你的内心独白。\n用五个关键词来讲述一个故事。\n你还没有原谅谁？为什么？\n你是一个社交恐惧症患者，描述你的一天。\n成长过程中，你遇到过什么挑战？\n描述你最喜欢的衣服。\n描述你最好朋友的缺点。\n描述你人生中第一次打架的经历。\n选择一本你最近看过的书，写一篇文学评论。\n为一对青梅竹马的新人撰写一段结婚誓言。\n如果你拥有一座别墅，你认为它应当建在哪里？为什么？\n观察地铁上的人，用几句话描述他们。\n如果不结婚，你会怎样度过下半生？\n你是一名记者，深夜接到一个杀人犯的电话：我等了六年，想和你聊聊。记录下你们之间的对话。\n说到信仰，你脑海里最先闪现的是什么？你有信仰吗？\n写一个颠覆你认知的科学发现。\n用一句话描述你所在地方的四季。\n描述最让你感到无助的一次经历。\n列出你今生必做的事情。\n你目前最大的烦恼是什么？\n描述最近让你一见倾心的物品。\n描述你最喜欢的运动员。\n你家附近都有什么植物？\n你是公关从业者，为一位最近陷入抄袭风波的名人撰写一封公开致歉信。\n有一天，你家小猫突然说：“主人，我要离家出走了。”反思一下你可能在哪些方面得罪了它。\n一个不善言辞的孩子和一个话痨小孩成了好朋友，你认为他们谁先改变谁？为什么？\n从你喜欢的一本书中选择一个描写性的段落（包括人物和情节），做一个无固定形式的扩展练习。\n假如18岁的你遇到了现在的你，你会对18岁的你说什么？\n一对夫妻刚刚离婚，他们再次相见时会怎么样？\n有没有一部电影或小说的结尾令你特别不满意？选择其中一段进行分析，它为什么让你不满意？\n不考虑金钱，描述一下你最想去生活一个月的地方。\n撰写一篇演讲词。\n如果可以预知未来，你最想知道的一件事是什么？\n描写两个互相激烈反对的人物，他们的性别是什么？多大年纪？为什么成为敌人？\n假如你有另外一个身份，你会做什么？\n在中国历史上，你觉得谁的贡献最大？说明理由。\n如果你是领导人，你会选择把资金投入太空探索等科研项目，还是解决贫困问题？为什么？\n摘抄一个让你惊艳的名著的开头。\n哪种疾病最让你惊恐？\n列出五件让你开怀大笑的事情。\n不加班的工作是什么样子的？\n描述一个生活中的顿悟时刻。\n描述一下你最想收到的生日礼物。\n生日这天，你会怎么感谢父母？\n吐槽一下你最无法理解的广告。\n如果你中了一个亿，会如何使用这笔巨额财富？\n你有一次与苹果公司CEO对话的机会，给你二十分钟，你会挖出什么独家信息？\n关于爱情，你想知道什么？\n当看见主人亲热的时候，猫在想什么？\n你身边的朋友会就哪些事情向你征求意见、索取建议？\n介绍一下你的母校。\n你最想穿越去哪个朝代？说明理由。\n描述一下上一部让你哭的电影/电视剧。\n描述你遇到过的奇怪室友。\n写下你现在的愿望、中年的愿望和老年的愿望。\n目前最让你期待有好结果的事情是什么？\n用一段话描述你所在的城市，不能出现地名。\n你现在最好的朋友是在你的哪个人生阶段认识的？你们一起做过的最快乐的事情是什么？\n十年后你想成为一个什么样的人？设想你要成为那样的人，需要做到的十件事情。\n如果能立刻学会一门技能或一种语言，你会选择什么？为什么？\n形容一下你的家庭氛围。\n二十四节气都有哪些？\n你喜欢自然界中的哪类景色？\n想象一个“985”学子的一生。\n你目之所及有哪些颜色？最喜欢哪一种？\n如果有改变历史的能力，你最想改变历史的哪个瞬间？为什么？\n69岁奶奶的日记本里写了什么？\n为你喜欢的物品写一首诗。\n你会给你的手指分别取什么名字？\n描述宇宙的尽头。\n描述你的前任。\n列举那些你需要感激的人，分别写一段感谢的话。\n回想一件你想做但不敢做的事情，是什么原因阻止了你？\n你在楼梯上或门外听到一次谈话，你听到了什么？\n如果你可以帮一个人实现愿望，你希望那个人是谁？那个愿望是什么？\n想象自己是一条狗，站在狗的视角写一个短篇故事。不需要是完整的故事，你想写什么就写什么，只要站在狗的角度阐述即可。\n你喜欢的第一个明星是谁？为这个人做过什么特别的事情？\n送一束花给平日里关心自己的朋友或者家人，写下他们的反应。\n列出你童年时期具有的六个特质。\n以上一个问题为背景，选择其中一个特质，描述最能体现这个特质的场景。\n谈到“陌上人如玉，公子世无双”，你第一个想到的人是谁？\n最让你恼火的事情是什么？\n你最无法忍受的声音是什么？\n以“喧嚣”为题写一首诗。\n写一句话献给曾经的自己。\n聚会上，人们都在闲聊，一个打扮得非常漂亮的女士走进了房间，其他的人会做何反应呢？记录下这些表现。\n如果你可以问两个问题去了解正坐在你对面的陌生人，你会问什么？\n乱写乱画和涂鸦究竟有什么区别？\n为生活中的一件小事写一首道歉的小诗。\n一个朋友曾对你做过一件很特别的事情，你当时的感受是什么？\n将勇敢、机智和诙谐这三个词融合在一个人物身上，创作一个小故事。\n描述你每天最喜欢的时刻。\n描述你童年时期的一段记忆。\n用一个词形容过去的一年，并说明为什么选这个词。\n你见过哪些奇奇怪怪的标语？\n描述你最尴尬的一次经历。\n自制一份健康食谱。\n描述你最讨厌的动漫角色。\n你和你的鞋子有什么故事？\n描述你最好的“非人类朋友”。\n看到落日时，你脑海里闪现的第一句歌词是什么？\n设定一个恶棍形象，写一个惊悚小故事。\n描述你百听不厌的一首歌。\n目前你最想去见的人是谁？\n你登上热搜了，是因为什么？\n描述你和人工智能朋友的一次聊天。\n你觉得自己像哪个动漫人物？为什么？\n写一段神秘的对白。\n具体描述生命中的小确幸。\n描述最近一个悬而未决的问题。\n以“我错过了一趟很重要的高铁”为开头，描写可能造成的很严重的后果。\n假如你见到18岁的妈妈，你会对她说什么？\n描写生活中的一个片段，要求细节讲到“飘进水杯里的飞絮”。\n作为朋友或家人，如何帮助一个最近曾发作的精神病人？\n如果有任意门，你最想去哪里旅行？为什么？\n怀疑自己是外星人，你要怎么证明？\n从一位母亲的角度出发，给自己十恶不赦的儿子写一篇传记。\n一个嫌疑人长得很丑，警察会如何描述这个嫌疑人？\n把你喜欢的一段文学描述改写成一首诗。\n把上面那首诗重新改写成散文。\n许一个明年你想达成的心愿。\n描写你爸妈的结婚照。\n描述一场输掉的比赛。\n如何与爱宠体面地告别？\n列出你最常看见的二十样东西。\n这二十样东西分别会让你联想到世界上的其他什么事物？\n描述一只你从没有养过的宠物，它可以是任何动物。\n两个人正从法院走出来，他们是什么关系？他们之间发生了什么事情？\n为一个你经常见但不熟悉的人，比如快递员、邻居或者便利店的老板，写一首诗，想象他的生活是怎样的。\n如果你的公司正面临资金不足的状况，很快给员工发不起薪水了。这时候你有两个选择：一是每人降薪15%，二是开除15%的员工。你会选择哪种做法？说明原因。\n描述你童年时期发生的三件趣事。\n回忆一下对你有重要意义的地方，例如一条河、一片树林、一个公园。用十分钟，写出这个地方的尽可能多的细节。\n围绕上述这些细节，写一个小故事。\n请评论《诗经》中的任何一首诗。\n如果重返你曾就读的学校，可能会发生什么故事？\n抛开兴趣爱好不谈，第一本真正让你震撼的书是什么？\n小时候你有过什么藏身之处或让你感觉安全的地方吗？它是什么样的？你为什么去那里？\n控诉你的老板，但不要使用任何明确表达愤怒的词语。\n用几种不同的感官体会来描述孤独，如触觉、听觉、味觉等。\n在报纸或杂志上选一篇简短的文章，将其中一个场景展开成一个新的故事。\n你发明了一种新型饮料，它看上去怎样？尝起来如何？\n找一个僻静的地方，坐下来，安静地聆听四周的声音，然后根据声音去描述发出声音的人或物体。\n围绕生活中一件根本不可能发生的事情写一个小故事，如一个人开着一辆没有发动机的车子到达了西藏。\n想象一下你的影子拥有什么智慧？它能教给你什么？\n在雪天的树林里，你最想和谁一起散步？你们会讨论些什么呢？\n描写一条从天而降的鱼。\n工作中你最讨厌的是什么？\n你的人生信条是什么？\n描述你交过的“最蠢的智商税”。\n曾在迷茫时给你力量的一句话是什么？\n如果可以进入游戏世界，你想在哪款游戏里生活？为什么？\n关于愤怒，你可能会想到火、红色、尖叫、暴躁、碰撞，将其中一个词语融入你虚构的场景之中。\n某天早上起来你失忆了，忘记了自己是谁，想象下你今后该怎么生活。\n以记者的身份，去一家餐厅卧底，然后写一篇评论。\n针对同一个物体，想出十个比喻（包括明喻和暗喻），描写这个物体存在的状态。\n列举长大后的三个好处。\n列举做孩子的三个好处。\n你会如何度过写作瓶颈期？\n关于未来，你最担心的是什么？\n想象有两个人在进行对话，他们可能在谈论另一个人，也可能遇到了困难，将对话写下来。\n根据以上两人的对话，思考他们有什么样的过去。\n海水被抽干了，地球将会是怎样的一番景象？\n突然发生故障的电梯里，有你的朋友、魔鬼、上帝，还有你自己，接下来会发生什么？\n写一封来自过去的信，重点放在时间流逝和任何能产生声音的事物上。\n一个年轻人正坐在高架桥上，目光呆滞，自言自语，后面会发生什么？\n写下你由一种食物的味道所联想到的一切。\n你突然看不见了，你该如何度过你的一天？这一天和之前有哪里不一样？\n回想一个你和他人之间的冲突，任何冲突都可以，写下你当时的感情和感官体验。\n现在从故事中其他人的视角，用第一人称描写这个冲突。\n描写一个场景，讲述两个语言不通的人如何沟通。\n以你生活中每天都会见到的人为故事主角，让他进行一场现实生活中根本不会尝试的冒险。\n苏格拉底有一句名言：“我只知道一件事，那就是我什么都不知道。”你觉得这句话有什么问题？\n你上班是因为什么坚持的？至少写出十条理由。\n一对情侣正在公园散步，这时一个男人朝他们走过来，问他们要钱，还威胁说如果不给钱，就要把他所知道的这对情侣之间的事情公之于众。由此发挥你的想象，续写故事。\n假如每个人都有一个伴侣，但这个人是随机匹配的，会发生什么？\n如果拥有瞬间移动的能力，你最想做什么？\n你做过什么不愿醒来的梦？\n选一张两人以上的照片，用三段文字来描述照片中的场景，分别从照片中两个人物的视角和照片之外第三人的视角来写。\n你心目中的英雄是谁？详细描述他的外貌和性格特征。\n如果食物之间发生战斗，你觉得什么食物最厉害？为什么？\n假如高铁上有个男孩主动加你微信，但过了几天你莫名其妙地被对方拉黑了，你被拉黑的原因可能是什么？\n回忆你做过的最不道德的一件事，用“我”的口吻叙述。\n从一个大四学生的视角出发，描述他在一桩酒驾事故中死亡的过程。\n描述乘坐公共交通工具时，让你感觉丢脸的一件事。\n去一幢建筑物内，从你周围任意挑选一个不会注意到你的人，快速记下你对此人的印象，并写下来。\n用“吻”和“禁忌”两个关键词写一个小故事。\n这个世界上如果没有镜子以及其他能照出容貌的物体，你的生活将会怎样？\n找三个你所熟悉的人，询问发生在他们身上最戏剧性的事情是什么，从中挑选一个回答，根据回答写一个场景。\n假如你是上帝，你最想做什么？描述你的一天。\n一天，父子二人走在街上，遇到了一个穿着奢华服装的女性。儿子不屑地说“：这种人肚子里一定没学问！”作为父亲，你该如何教育自己的孩子？\n设想一个场景，以“对不起，但是”为开头，写一个故事。\n考古队到沙漠考古，发现一个墓碑，上面刻着这样一段话：“我曾经是一个伟大的国王。在我的一生中，前八分之一是快乐的童年……”后面是残缺的，将省略的部分补充完整。\n描述你最想忘记的事。\n描述你最显著的特质。\n喜欢一个人是什么感觉？\n描述你印象中的秋日黄昏是什么样子的。\n你现在身处阿那亚，住在海边的别墅里，你最想在那里做什么？\n用内心独白的方式，让一个人去陈述他多么喜欢或讨厌现在的工作。\n描写一场灾难性的大火。\n描写一场引发暴力的辩论。\n描述你迄今为止最大的成果。\n制订一个改造世界的计划。\n选择一件你喜爱的物品，赋予它情感和行为，将它写入你的故事中。\n闭上眼睛，想象回到你居住过的地方。记下你所见到的每一样东西，所闻到的每一种气味，所听到的每一个声音。\n上个星期五晚上，你在做什么？用具体的细节描述你所在的地方。\n用十句话描述一个场景，每句话不超过十个词。\n描写你生命中的某个小场景，比如第一次约会、第一次接吻、第一次受到惊吓、第一次结婚。\n以“浴缸”“艺术家”“自杀”为关键词，描述一个场景。\n如果其他人的时间静止两年，只有你能动，你会做什么？\n你想拥有一款什么样的机器人？希望它能为你做些什么？\n描述一次浪漫的分手：一方想冲出爱情的围城，另一方却不愿意。\n一个丈夫，发现自己的妻子和自己的好朋友在热吻，他会有何反应？把他的所有思想活动都写下来。\n你手机播放列表里的第一首歌是什么？它是什么风格的？\n尝试发明五个网络新词语，并解释它们的意思。\n描写世界上最古老的生物。\n描述一只会读心术的猫。\n苏东坡吃到现在的食物，会给出什么评价？\n想象一下，被人用枪指着脑袋时，你会如何自救？\n两个同学因为一个词的意思发生争吵，最后查阅了字典，发现两个人都错了，然后他们开始争论谁更趋近正确答案。写下他们的对话。\n列举至少三个上星期网络热搜的话题。\n畅想十五年后的热搜话题。\n描述一幅你喜欢的书画作品。\n列举一则让你印象深刻的广告语。\n写下你想对爸爸说的话。\n写下你想对妈妈说的话。\n你喜欢收集什么东西？\n论述李白对唐诗的贡献。\n假设三百年后人类将在月球上面建造城市，描述其场景。\n某天，一个已婚女人突然收到了一封匿名信，信中放着的是几张照片，上面是她的老公正在和一名年轻女子接吻。给这个故事续写一个结尾。\n相恋八年的情侣终于结束爱情长跑，但婚礼前一个月，男方被查出癌症晚期。他想取消婚约，他要如何告知女方这件事？\n“我过去常常拼命工作。一天工作十五个小时，一周工作七天。但是我并没有挣到大钱，直到我的工作时间减少很多之后，我……”请续写故事。\n你们高中学校的风云人物现在怎么样了？\n你是“微博入殓师”，为一个逝者发条微博。\n写一段发生在海边的记忆。\n给此刻你想到的人写三行诗。\n你觉得外祖母床下的神秘盒子里放了什么？\n你觉得世界上最糟糕的工作是什么？\n写一件让你抓狂的事。\n写一则产品召回公告。\n为你家乡的特产写一条广告。\n形容一下青草的味道。\n下周就是母亲节了，给你妈妈写首诗。\n下周就是父亲节了，给你父亲写首诗。\n描述你想象中的外星人长什么样，并画下来。\n一个最不可能辞职的员工提出离职，是因为什么？\n你在大型内衣连锁店工作，如果必须把一款新上市的内衣卖给一位男士，你会如何销售？\n你会如何表达愤怒和自我排解呢？\n你被邻居举报了，你可能做了什么？\n帮助一个贫困国家的最好办法是什么？\n如果有机会给1950年的科学界传达一句话，你会选择说什么？\n如果有一天，《流浪地球》里的情形成真了，你会如何拯救世界？\n一条公路上，一辆运钞车上突然掉下一袋现金，你会怎么办？\n你星期一感觉如何？\n星期五闻起来是什么味道的？\n你被逮捕了，那个导致你身陷囹圄的罪名是什么？\n过来人给过你最好的建议是什么？\n你在路上遇到了一只宠物，它是什么样的？它的主人又有什么特点？\n五个小朋友分一块蛋糕，只准切三刀，你该怎样平分蛋糕？\n想象古代最受欢迎的零食有哪些？\n你喜欢奶茶还是咖啡，为什么？\n你朋友剪了个糟糕的发型，很难过，你该如何安慰他？\n如果要你给十二个星座重新命名，你会给它们取什么名字？\n童年时期你最想得到却没有得到的东西是什么？\n当你坐着车从城市上空飞过的时候，你看到了什么？\n你同时拥有杂志编辑、脱口秀节目主持人、新闻评论员等多个身份，这些工作各不相同，你最喜欢的是哪一个身份？工作中最有成就感的一刻是什么样的？\n用三个词来形容自己，会是什么？为什么？\n一天，你和男友乘坐游艇出海游玩。突然，一条鲨鱼游过来，围着游艇转。你们无法开动游艇，因为很可能被鲨鱼撞翻。你们该如何摆脱鲨鱼？\n如果你突然有了超能力，能够改变现在世界上的一件事，你最希望改变的是什么？\n把你的生活写成新闻故事，你会选择什么标题？\n用一两句话，向你8岁大的侄女解释什么是人工智能。\n蝙蝠侠和超人打架，你怎么劝架？\n你的思想是什么颜色的？为什么？\n二百年后，人类的烦恼是什么？\n下水道的盖子为什么是圆的？请列出五个理由。\n你是浮游生物，生命极其短暂，但有着人类的大脑和思维。在你短暂的一生中，你会做些什么？\n下辈子，你希望成为一个什么样的人？为什么？\n死刑犯在被执行死刑前，最想说的是什么？\n新闻频道最近雇用了一个会讲rap的主持人，今天的新闻会是什么样的？\n你小时候的梦想是什么？\n现在呢？\n中国神话故事里让你印象深刻的人物是谁？写下你对他的印象。\n你是老板，要辞退一名高管。他是名牌大学理工科毕业，理性思维能力很强，但是他的绩效非常不理想。你要怎么写一封辞退信？\n收到辞退信后，他有什么反应？\n你在出租车上听到过什么有趣的故事？\n你最早接触的图画书或故事书是什么？\n你会如何定义自己？\n你会如何定义浪漫？\n你认为《水浒传》里最悲剧的人物是谁？为什么？\n你被邀请参加一档恋爱真人秀节目，你为什么拒绝？\n你请病假去面试，结果在面试公司遇到了现在的老板。描述其场景。\n这里是“110，请问你遇到了什么情况？\n消防员接到一个小朋友的报警电话，小朋友问：“我们真的每天都要学习吗？”接警员该如何回答？\n跨年演唱会上，现场出现了一个直播事故：因为工作人员在调试设备，直播现场超过半分钟没有声音。你作为主持人，该如何救场？\n你身边自律的人是什么样子的？\n你觉得自己的心理年龄是多少？说说原因。\n莫言的哪一部作品给你印象最深？为什么？\n描述一下你的第一部手机。\n明天就是你好朋友的生日，你要如何给他制造一场惊喜？\n如果玩真心话大冒险，你会选择什么方式搞怪？\n你会因为什么决定和一个人结婚？\n假如你和下面这种人结婚，请写下你的婚礼誓言：你的高中同桌或一个陌生人或一个花心爱玩的人或一个爱你的人。\n一个和你斗了一辈子的人得了癌症，写一段话安慰他，鼓励他振作起来。\n如果一天只有六小时，你会怎么度过这一天？\n用约一百四十个字形容一道菜特别难吃。\n为大自然写一段诗。\n苹果酱的味道让你想起什么？\n巧克力的味道让你想起什么？\n爆米花的味道让你想起什么？\n如果你的狗会说话，描述你和它的对话。\n分别用一句话介绍以下电影：《怦然心动》《肖申克的救赎》《海上钢琴师》《实习生》。\n刚下班回到家，你的对象打电话跟你说：“一切都结束了，今晚我就会离开这座城市。”这时你脑海中闪现的第一个念头是什么？\n如何快速毁掉一段友谊？\n描述火星撞上地球的场景。\n你认为夏天最不能缺少的三样东西是什么？\n人类登陆火星后，和地球打的第一通电话会说些什么？\n你是故宫里的一只猫，描述一下你看到的四季。\n你家里突然来了一位不速之客，他究竟是谁？有什么故事？\n在海里潜水时，你捡到了一个漂流瓶，瓶中有一封信，上面写着什么？\n在威尼斯电影节上，你获得了最佳男（女）主角奖，你的获奖感言是什么？\n给你十块钱，你会去菜市场买些什么？\n描述你最讨厌的味道。\n描述你的一日三餐。\n描述你经历过的最荒诞的真实事件。\n最近一个月发生了什么好事？\n你朋友分手了，写一首打油诗安慰他。\n列举单身的十个好处。\n你期待的春天是什么样子的？\n你理想中的18岁是什么样子的？\n如果有钱了，你会做什么？\n","date":"2024-10-06T22:00:18+08:00","permalink":"https://oddyti.com/post/writing-ideas/","title":"随笔话题"},{"content":"观影记录 大地惊雷 True Grit (2010) 观看时间：2024-9-20\n推荐\n剧情，科恩兄弟导演，剧情棒，摄影棒\n三峡好人 (2006) 观看时间：2022年秋\n推荐\n贾樟柯导演，很真实乡土\n路边野餐 (2015) 观看时间：2022年秋\n推荐\n梦幻离奇而又感动\n燕尾蝶 スワロウテイル (1996) 观看时间：2022年秋\n推荐\n拍的非常美好，虽然剧情并不是美好\n列宁格勒牛仔征美记 Leningrad Cowboys Go America (1989) 观看时间：2022年秋\n推荐\n幽默，荒诞，又有点还没想明白的隐喻和讽刺\n肖申克的救赎 拯救大兵瑞恩 辛特勒的名单 隐入尘烟 大佛普拉斯 星际穿越 没有过去的男人 重庆森林 待看清单 好家伙 GoodFellas (1990) 马丁·斯科塞斯\n悲情城市 (1989) 侯孝贤\n配乐\n假面 Persona (1966) 英格玛·伯格曼\n卡萨布兰卡 Casablanca (1942) 八部半 8½ (1963) 乡愁 Ностальгия (1983) Ностальгия导演: 安德烈·塔可夫斯基\n镜子 Зеркало (1975) Зеркало导演: 安德烈·塔可夫斯基\n那年夏天，宁静的海（1991） 北野武\n","date":"2024-09-21T10:41:40+08:00","permalink":"https://oddyti.com/post/movie-records/","title":"观影记录·待看清单"},{"content":"内容涉及剧透，还未体验的朋友谨慎阅读\n47小时后，跌跌撞撞的还是通关了。到最后一章花果山顶石头前，迟迟不想按下进入大圣记忆的RT键，不想旅程就如此快的结束，我想这可能也是许多玩家玩到这里的想法。不过一旁八戒的话却时刻透露着想要复活大师兄的焦急，对他而言旅程还仍会继续，对我而言旅程即将结束（除非游科赶紧把DLC端上来！）\n通关后，百感交集，总觉得不应该就这样结束了，有很多感触和想法，所以就写下来吧，于是敲敲打打写了这些，文笔很差，思绪不严谨，所以只能说是碎碎念。\n好玩否？ 记得冯骥曾说“游戏最重要的是，它得好玩”。黑神话在我玩下来，的确做到了这一点。在整个游玩过程中，它总一直会有许多吊足胃口的方面，不断给予我玩下去的吸引力。\n最直接的一点是：试问哪个小朋友能在如此美丽的画面，操控如此帅的大圣的情况下而不感到激动呢？\n故事剧情 最大的一点吸引是剧情，或者说是我对黑神话所展现的后西游故事的好奇。说来惭愧，到游玩前我也还没有真正去读过《西游记》的原文（不过最近也开始去补《西游记》原文了）。对西游故事的了解，还是儿时从86版《西游记》中吸取的断断续续的碎片。那时候对《西游记》的感受就是师徒四人遇到一难、搬救兵借法宝、解决一难、再遇到一难，如此循环，直到取到真经，这似乎是一个中国神魔版的公路片？而且当时对师徒四人的看法也是十分简单，简单的就像小时候问总会问家长的一个问题“这个人是好人还是坏人？”所以总结下来，儿时对于西游记的印象，仅仅是一个好人团队一路打败坏人的故事。而慢慢长大，接触到一些《西游记》的二创、解读，才慢慢意识到，《西游记》并非儿时认为的那般简单的打怪故事。而我也对这些二创或深度的解读非常感兴趣，就像看完《让子弹飞》之后痴迷的去看了许多对其的解读一样。所以在游玩《黑神话》的过程中，对我最大的吸引便是游科会如何讲其黑神话的剧情。\n游玩下来游科并没有让玩家或者说让我失望。无论是后西游故事的续写、对于原著剧情人物的合理改变和背景丰满、以及世界观的丰富，都令我十分陶醉。\n整个流程下来，给我留下深刻印象的地方太多。第一章的“若不披上这件衣裳，众生又怎知我尘缘已断，金海尽干”、第二章的“我来助你”、第三章黄眉倒果为因、第四章八戒和紫蛛儿爱而不得“戒网”剧情、第五章牛魔王一家被卷入东西天之间的冲突中进退两难的悲剧（就像身本忧中两头猪并封，进退两难）、二郎神和大圣的心心相惜（让我好生欢喜！）、大圣的布局、石子石父石母（杀父杀母仇人就在眼前，却能埋藏恨意装傻拍手，心有惊雷而面如平湖，这般心性，此子断不可留，杀人者非我也，广智也）、通臂猿猴（最后一段，虽不能言，但其悲喜能透人心）、小狐狸与不空、马天霸（老马啊！老马）、牛先锋（你是个顶好的猴头）、四妹（可是她叫我臭猴子，游科DLC能不能让我打上天庭）、萍萍（虽然知道是红孩儿假扮，可是他一声声叫我猴哥哥）……还有许多写在影神图中小妖的有趣故事（比如罗刹宫将牛侍长一把抱住的牛校卫，当时看到笑死我了）\n游科讲故事的方式也做到了在完完整整全盘托出与隐晦零散草蛇灰线之间的完美平衡。相较于老头环将整个故事拆分成零散的碎片、然后挑出部分埋在对话、物品描述、及其稀有的CG中、给予玩家非常庞大的讨论和想想空间的做法，我更喜欢游科讲故事的方式。我很喜欢老头环十分宏达且震撼的故事，但是想要感受到这样的震撼，仅仅靠自己体验完一次游戏是很难的。真正在我游玩的过程中，我几乎很难摸清整个故事的脉络，在许多时候能感受到的是，这个人或者这件事背后深深的神秘感，故事一定会比我所想象的更加复杂且深邃。这样的神秘感会在通关并且在社区细细看了大神的总结和分析，了解到整个故事的脉络后，得到释放，并且会深深震撼于老头环整个故事和世界观的架构，以及各个人物角色身后充满宿命或悲剧般的故事（尤其是蒙葛特与蒙格两兄弟的故事，老葛家满门忠烈！）。但是这样的震撼是我在游戏流程中或者一周目中很难体会到的。而游科《黑神话》的讲故事方式，便能让我在第一次的游玩过程中，体会到这样的震撼。一方面是原本就有对着西游故事的一定熟悉，另一方面是对于能直接打动玩家的故事剧情，游科用CG、章末动画来将这份打动与震撼直接呈现在玩家面前，而对于较为深邃的暗线，游科也通过草灰蛇线的方式埋在了游戏中，给予玩家一定的神秘感和想象空间。\n另外，《黑神话》中不仅各个配角NPC都有着自己背后的故事，甚至连路上遇到的每一种小怪都有着其自己的故事。在每击杀一种新的小怪后，影神图中便会解锁这个小怪的故事，游科不仅为每个小怪写了一个或寓言风格，或交代世界观的故事，还给小怪配上了一首概括的小诗以及插图。玩家不会觉得小怪是用来放在路上充数提供灵韵的。这极大完整了整个故事的世界观，也极大增加了玩家游玩游戏时的代入感，似乎《黑神话》里的世界，就是一个真实存在的世界。\nBOSS 《黑神话》的Boss战无疑是每个章节最令我期待的事情。整个流程中有时候我会沉浸在欣赏Boss大开大合的流畅帅气招式中，即使一次次的死亡。尽管有一些Boss打起来会让我觉得很难受，甚至有一些会让我感觉很“粪”，而这些主要是一些大体型的或非人型的Boss，例如魔将·妙音，百眼魔君。其中原因有很多：Boss体型大，视角锁定便会不便；Boss体型大了之后，其招式攻击范围大，攻击频率低，不够帅，往往是大范围下砸、横扫、冲撞，让我很难躲避同时交互性很差，往往就是躲一下；Boss体型大之后，由于视角和体型遮挡，有时难以看清出招前摇；Boss自身有空气墙（点名百眼魔君）……同时一些机制Boss也会令人打起来难受或者无趣，比如魔将·莲眼（基本都是在躲弹幕）、音游小骊龙、大石敢当。\n但是除此之外，类人型的Boss设计上便十分出彩。在攻克这些Boss过程中我往往会在惊呼“好帅，还有这招”后死掉。如老少虎先锋大开大合，拳拳到肉的力量感、寅虎极具重量感和力量感的大刀招式，不能刚劲有力并且凌厉无比的拳法和腿法，小黄龙风驰电掣而丰富的流畅刀法、毒敌大王（其招式的设计非常符合其蝎子精的定位，尾巴和右手钳的招式设计的非常棒，虽然卡了我很久）、夜叉王（没说的就是帅）、二郎神灵活多变，各种武器法宝变幻莫测、以及最后大圣残躯像老师傅喂招似的切磋……这些Boss就算打的时候会让我经历一次次挫败去熟悉他们的招式，但是却会让我更加喜欢这些Boss的设计，更喜欢这个游戏。同时，在一次次倒下重生，熟悉了Boss招式并击败后，那种痛快感难以言说（上次这样的痛快感还是魂3过米宝的时候）。\n另外，游科的Boss设计，在很多地方非常贴合Boss本身的特性。例如身为蝎子精的毒敌大王，游科围绕其尾巴设计了许多招式；青蛙们的招式更多围绕有力的后腿和舌头（我相信没有人没尝过几乎零帧起手的双腿蹬）；石头精怪们的笨重；晖月魔君许多动作非常符合现实中大公鸡的形神……\n战斗与难度 我个人非常喜欢《黑神话》的战斗系统。我自己玩过的动作类游戏不算多，《黑暗之魂3》、《艾尔登法环》、《战神》、《巫师3》（如果巫师3算的话）。但是综合下来，我觉得《黑神话》的战斗系统与难度设计是我最喜欢的。\n刚开始上手时，我的战斗思维还是局限在魂游那种拉开距离，躲掉Boss攻击，在间隙偷几刀，然后继续等待时机。这样的战斗思维在遇到第一个Boss幽魂（对不起牯护院，你太弱了）时候吃尽了苦头。幽魂或者说大头的攻击对于刚刚踏入旅途的天命人来说太强了，基本两三下就一条命，但是他吃硬直，一套轻击接终结技的话刚好能打出一套硬直。但是由于我刚开始玩还是像魂一样先拉开等待大头出招，闪躲之后再找机会A几下，这样的方式由于不熟悉大头攻击手段，导致很容易就死掉。在尝试好几次之后，在同学的点拨下，才意识到要主动上去打压制，通过轻棍终结技和定身术压制输出。这才慢慢过掉幽魂。\n《黑神话》的战斗系统非常丰富，三种棍势都有自己的派生切手技，再加上四种类型的法术、数十个精魄化身、以及不同兵器和披挂和丹药带来的不同增益，极大丰富了旅途。\n整体而言我认为《黑神话》的难度并不算太高。游戏前期出了不熟悉游戏机制而卡了十几条命的大头以外，其他的Boss并没有卡很久。白衣秀士两次过，黑风大王和黑熊精都是一次过，虎先锋三次过。直到游戏中期才遇到一些卡了挺久的Boss。魔将·妙音是一个，打的太难受了，但是我怀疑卡在这里的原因是由于我太困了，在我尝试了一下午没有成功后，去床上眯了一会，下来第一把就过了。青背龙小卡了一会，不过很快就能熟悉他的招式，熟悉后很简单就可以过。真正难打的是毒敌大王、小黄龙和二郎神，这几个Boss平均每个可能都花了一两个小时才能过掉。\n不过我仍然认为这样的难度是很好的。即使毒敌大王、小黄龙、二郎神和寅虎这些Boss可能需要一两个小时才能过掉，但是我相信每一个过掉这些Boss的玩家当时内心一定被成就感和激动所充满，并且十分想要再次挑战这些Boss。在攻略这些Boss的过程中，其带给我的成长正反馈是非常强的。从初见几招就被秒掉，到慢慢熟悉Boss的招式，知道这个抬手是对应哪个招式，下一招是快是慢，哪一招是投技必须躲开，哪一招可以识破……又到开始调整自己的加点，改变打法，尝试不同的棍法和法术，是通过定身术、聚形散气、变身快速消耗，还是禁字决一开，来一场真男人的1v1……无论是怎样，当我通过不断试错熟悉学习过掉这些Boss后，那种激动和成就感无以言表。\n另外，我十分喜欢《黑神话》在土地庙能够无代价的洗点的设计，这极大促进了玩家针对不同的Boss尝试组合不同的打法流派，从而发掘更多游戏的乐趣。虽然我仍然是一个非常懒的去研究不同打法的人，但是在游戏慢慢推进到中后期，我发现我不得不去研究这些不同的加点和棍法流派，才能更好的推进游戏。一直到第三章，我的打法仍然是只用劈棍，识破都没有点，有积累的棍势我就跳跃轻击接重击后快速用掉。在前面两章这样的打法还是挺好用，但是到后面发现越来越局限，于是我开始尝试使用识破，便发现了新大陆，后面就一直用劈棍识破。直到毒敌大王我发现这个酗酒男人攻击范围太大了，识破也不好识破，于是我尝试了戳棍的退寸进尺，然后过了。不过我还是钟爱我的劈棍，一直用劈棍打到了大圣。\n但是有一个很奇妙的事情，在我和小伙伴们的交流中，我发现大家卡关的Boss很多都不一样，有的人卡在A过不去，B反而很快就过去，而有的人A很容易过，B反而卡很久。我想可能这在另一方面确实体现了《黑神话》Boss设计的多样性。\n美术 一直到真正亲手玩到《黑神话》之前，我能无法想象国产的第一个3A游戏的美术，能做到如此精美、具有真正的中国风格。哪怕在游戏发售前，已经有数个实机演示像我们展示了游戏中的精美画面和美术，但是真正操控天命人漫步在“雨过天连青壁润，风来松卷翠屏张”的黑风山中，细细端详散落在山中的佛像、边查字典边阅读禅院两侧的楹联、在崖边的蒲团打坐时，黑风山的景色仍然能带给我无比的震撼。而游戏中的兵器、披挂、各种道具、葫芦、仙酿的精美建模，也让我时不时都会停下来仔细端详。\n另外《黑神话》的拍照模式真正做到了拍照模式应有的意义。之前玩过的许多游戏也有拍照模式，但是并不是有拍照模式的游戏就有值得拍照的景色或场景（大表哥2例外，大表哥神作！）。而《黑神话》有太多太多值得“在这停顿”并开始拍照的地方，无论是Boss战时的精彩瞬间，还是不同章节的旖旎风光（火焰山就算了）。但是一周目急于推图，并没有慢下来仔细欣赏和拍照，再者由于配置不够，也不能拍出最好画质下的照片，所以等以后升级配置，再在二周目慢慢游玩吧。\n不得不提一下每个章节结束时听着老猴子讲述总结此章的故事，细细欣赏画卷是我最惬意也是最喜爱的部分之一。画卷画的都是此章在西游时候的故事。放大后还能看见非常多和原著以及本作相关的细节，并且在某些关键人物处，还有新的讲述（我恨不得每个人物出都能有讲述）。而在天命人重走西游之后再来回味，便有一种时过境迁，物是人非的悲感。而这部分的音乐也是我最爱一首：《静隐深山无俗虑》，尤其是弦乐部分出来之后，有一种冷寂而又宁静的感觉。这样的感觉突然让我忆起了动画《宝莲灯》的插曲（歪个题，《宝莲灯》也很好看，里面悟空的角色塑造也很丰富，而且陈佩斯的配音非常棒），记得小时候看宝莲灯听着里面的插曲也是这样的感觉，沉香独自在天庭、人间磨砺，面对自己难以反抗的敌人，也有一种隐隐的孤寂。而老猴子的娓娓道来，对此章节故事的精确概括和凝练，也非常到位。印象很深的是第四章曲度紫鸳（舌尝思）的总结：“可命运呐，就像爱人的舌头，嘴里一套，心里一套。哪怕亲口尝到，也不知到底是想要，还是不想要。”\n游戏里有着太多太多实景扫描的建模，甚至在游戏里看到了小时候待的县城的寺庙取景（就是四妹炼丹那儿的天王殿，是平武县报恩寺天王殿取景），说起来很好笑，在县城待了数年，还没有进报恩寺看过天王殿，反而在《黑神话》里见着了。所以下次回县城不得不去参观下了。\n实景扫描也有好玩的地方，有网友在黄风岭发现了钢筋混泥土（图源网络）。\n音乐音效 奈何《黑神话》音乐播放器太庞大，只恨音乐未在网易云上线。\n游戏开场除了大圣英姿和跳下悬崖后被筋斗云托起的场景外，背景音乐《英雄气概等时休》是给我留下震撼印象的另一个元素。整场序章战斗宏大、威压、壮烈的氛围离不开这首音乐的加成。而在整个游戏流程中，许许多多场景和战斗时，其背景音乐烘托的恰到好处。有许多音乐也给我留下了深刻的印象，比如急中生智时的广智主题曲《灵山莫远求》，几乎陪伴了整个流程。直到第四章击败小黄龙，音乐变成了《善恶若无报》，那时脑子里都是还差三豆，还差两豆，还差一豆，你完啦！而第二章灵吉菩萨的陕北说书，可以说是最让人眼前一亮（耳旁一亮）的曲子。大漠黄沙，配上粗犷有力的陕北说书，太般配，同时也感谢《黑神话》让我认识到了如此优秀的民间艺术（另外让我想起了之前就关注的一个民间音乐人张尕怂，最开始听黄风岭的音乐我还以为是他唱的）。\n放一张黄风岭特色凤翅金冠图（图源网络）\n另外每个章节最后的动画音乐也非常非常棒，音乐和动画剧情主题非常贴合，而冯骥的作词更是令人惊叹。\n而不同Boss战斗时的音乐，除了烘托出Boss战斗时的宏大气氛以外，也给予了卡关的我一丝丝慰藉。\n写这部分时候，去重新单独听了许多背景音乐，非常值得重新单独听一遍，可以听出许多游玩时没有注意到的细节和感受。\n而游戏的音效也做得非常棒。无论是在菜单界面各种选择时候的音效，还是战斗过程中棍法击打后的音效反馈，积攒棍势音效，都非常贴合并且具有中国特色。另外有一个细节，也就是不同章节除了土地庙不一样，每次传送或者复活时候，不同章节也会有不同的音效响起，第一章是古筝还是琵琶小旋律（没听出来），例如第二章是三弦小段，第三章是寺庙内某种钟？\n台词与配音 台词，是除美术外最能体现中式浪漫的部分。而《黑神话》的台词，无论是关键剧情的对话、还是如八戒一样路途上的闲聊吐槽，亦是战斗时的感叹言语，都不止做到了贴合人物，服务剧情，更是给人物和故事赋予了灵魂。\n八戒可以说是我最喜欢的人物了，无论是取经（根）路上的各种吐槽，还是他突然情至深处的感叹（“我就不该随你再来这破落地方，来了就想起当年那些糟心事情。一去这么多年，也不知当年……罢，罢，不提了，事过无悔，事过无悔”），还是我也没说要听你非要讲的讲故事，其台词和配音都非常贴合本作中八戒的角色。除此之外，八戒的交互做得非常好，游戏中天命人各种各样的操作，都有可能触发八戒的吐槽，并且恰到好处的让我有时候恍惚似乎这并不是游戏，是真的有人在我旁边陪着我。有一次我对一个难缠的小怪（海上僧小怪版），我一直觉得这个怪很难打，所以想快速解决战斗，于是上来就给了一个定身术，结果八戒直接嘲笑吐槽道“诶嘿，你怕这泼怪，我看出来了！”，给我整尴尬了，我还是头一次被NPC整尴尬。另外一次打夜叉王时候，在他抬手瞬间定住了，差点挨了一下，正当我夸自己定的好及时时候，八戒说道“定的好！”，仿佛他真的能看出形势一样。乃至放铜头铁臂如果放早了没被撞倒，八戒也会吐槽“贤侄，放早啦”。\n在游戏最后（剧透警告），进入大圣记忆，在老猴子说大师兄再无可能复生，天命人会传承大圣的根本和名号时，八戒悲愤到“你是说，让这小猴子顶替我师兄，他配吗”，但是真正当我们需要独自面对大圣残躯时，八戒不仅不放心他的天命人贤侄：“他一向木木樗樗的，我不放心，我同他一起去”，还说呼喊道：“小猴子，好侄子，打不过就跑，悟空的名头，咱不要也罢！”当时听到这里，已经泪目。\n八戒还会讲故事，如果玩家跑掉了，他还会吐槽你不让他说完，如果回来，他还会继续讲。在他讲故事中，有一个非常泪目的故事，交代了为什么他会来帮助天命人，也交代了他为什么当初没有帮悟空对抗天庭的围剿（结合第五章悟空对牛魔王的帮助，非常泪目）：\n我那大师兄，虽得成正果，却总是闷闷不快。在灵山他不听如来讲经，也不接玉帝传下的御旨，甚是古怪。一日他命我（“命”字用的太好了）陪着饮酒，我俩从西牛贺州喝起，腾云驾雾，一路喝遍四大洲，灵山珞珈山，方寸山须弥山，还有老猪的福陵山他的花果山……那场酒喝得老猪我大醉不醒，睁开眼已是三界大乱，四处都说大师兄死了，还说是二郎神动的手，胡说！大师兄，谁能杀得死？定是那遭瘟的猢狲藏起来哄骗老猪！再后来，有只老猴子找上我，要我扶持什么狗屁天命人，说这天命人，就是找回大师兄的关窍，就你？你连大师兄屁股边上的一根毛都不如。以老猪的聪明伶俐，决不相信大师兄死了，老猴子的话嘛……不能不信，也不能全信。这叫顺水推舟，你只管跟着老猪，听凭老猪差遣。我倒要看看，他葫芦里到底卖的什么药。\n另外便是二郎神的台词和配音。打完真结局再回来看游戏序章二郎神的台词，发现其话里有他意。能看出二郎神实不愿与悟空为敌，两人惺惺相惜。\n蠢狗，放肆，还不退下\n都记好喽，他不是只普通的猴子，他是有功的猴子，是封过佛位的猴子\n这里除了我，没人配与他单挑（避免大家群殴大圣）\n猢狲啊猢狲，我本不想与你这个手下败将再战一场\n这样罢，一会儿若是你败了，我带你回天庭\n他们，留在这里铲平花果山\n若是我输了，我定然不会罢休\n他们，照样铲平花果山\n（嗨呀）生灵涂炭呐，好歹也是同僚一场，是真不想打\n要不你现在跪下，认个错，这事儿就算过去了，如何？\n老天一再给你机会\n你这般不识抬举，算不算背恩忘情\n斗战胜佛，你可知这长生不老的佛位，有多少人求而不得？\n泼猴，你受了天箓，本性未改\n今日谁也救不了\n泼猴，吃吾一刃（泪目，开大还要提醒一下）\n而隐藏关卡梅见峰天命人寻到二郎神时，此时二郎神已经承受大圣的意难熬多年，也渐渐明白了大圣当以死换生的想法。他的许多台词，能看出他和大圣同为天庭反骨仔的心心相惜（太好磕了bushi）。\n你心里，一定有过不去的事，或者放不下的人，我也一样\n我杀不了那只猴子，没人杀得了，除了他自己\n后来我才明白，也许那是唯一的办法\n他没得选，我，也没有\n而在战斗过程中，二郎神在明白大圣的心意后，也在替他考验天命人，这能从他的战斗台词中窥见\n欲学前人，当坚苦志\n不中要害，便是穷忙\n多用神通，藏私无用！\n下次还受骗吗？\n神通不够，再不上前，如何超过他！\n躲不过这刀，还不如再来过\n而除此之外，战斗中从天命人身上看到了当初大圣的影子，也会感伤，不断念叨着当初大圣的好，感情把我们天命人当大圣代餐了是吧，二郎神打的正难受呢，还得不断听他念叨什么“你啊，终究不是他”，“你不在的日子，我每天都在想你”什么什么的，更难受了，太沉重了……\n你啊，和他比差远了\n打开生死路，你让我好生羡慕\n不知为何，一见到你，我就想起来很多事情\n刚才，我一直在想\n你我一战，是不是他的本意\n天上那些庸才，不如我者多，胜似我者少\n从前他在时，就只有他，值得一战\n小猴子，你果然有几分他的影子\n此番相见，是喜呀\n你这猴子真令我欢喜（猴欢喜！）\n如今，他却用自己换了你来\n让我试试，你与他到底有何不同！\n你因天命而来，可你不要忘了\n他，最不信天命！\n承受他的意志有多难熬，我比你更懂\n你，终究不是他（每次死了听到这句，更加难受）\n你不在的日子，我每天都在想你\n果真，是个好猴子！\n而二郎神战斗时其他台词，也十分具有韵味\n命由人造，与天何干\n天地不仁，天命不公\n你一路走来，看明白了吗？\n人心一念，天地皆知\n度雾穿云，飞洒天星\n长空万里，荡剑山河\n藏巧于拙，用晦而明\n寓清于浊，以屈为伸\n威震山岳，胸怀星斗\n剑锁青霄，怒起雷霆\n云山渺渺，阻障重重\n昔年修道时，师父常说\n无关楗不可开，无绳约不可解\n如今我终于明白，束缚自己的唯有自己\n而游戏其他人物的台词和配音，也挑不出任何的问题。黄风大圣的“疯狂星期四，我来助你！”，在进入隐藏地图见到这样的黄风大圣，又怎会想到这样黄风大圣会变成这关的失了心的反派Boss呢？\n通臂猿猴，最后集齐五蕴那儿，哪怕她没有一句人言，仅仅是配出的叫声和语气，就会让人眼眶一湿。紫蛛儿的那一声“姑娘们，排宴”，也让人红了眼。四姐的“臭猴子，你说……这山岭外的世界，究竟是什么样的？”（可是她叫我臭猴子啊），其悲叹的语气，让人唏嘘，尤其是看见四姐成就那儿写着“她的山外青山，终究没能与他去看”。在萍萍的一声声猴哥哥中迷失自我的天命人，虽然我玩的时候就提前知道这是红孩儿假扮，不说了，我宁愿只知道她是萍萍……哪怕是地图上的小怪，有时候也会配上一些符合剧情的台词，极大增强了真实性和代入感。\n六样情——章末动画 谁也不会想到，游科会在每一章末尾放上这样的一段制作精良，锦上添花的动画。这些动画的存在，就像小时候做的语文赏析题一样，深化思想、升华主题。并且，每个动画都配上了制作精良度非常高、非常贴合主题的一首音乐，两者相辅相成。\n若不披上这件衣裳，众生又怎知我尘缘已断，金海尽干\n第一章《看见》，最后观音的一句“若不披上这件衣裳，众生又怎知我尘缘已断，金海尽干”，直接将我拉了出来，不在是仅仅沉浸在金池一念佛一念魔的故事中。而在表现金池长老欣赏袈裟贪心起时，动画的通过黑熊影子吞噬金池长老的表现手法和音乐的由“贪嗔痴，看见”转而变为念经之声以及紧张的弦乐鼓点，极具冲击力。并且，第一章根器为眼看喜，就像金池一样，眼看袈裟，喜起贪念。\n第二章《聋》，起初以为是聊斋一样的故事，狐狸变狐妖，人妖殊途，未曾想却是一梦杀狐的转折。更加震撼，因梦而杀狐，耳听即怒，不如聋。不过这一章动画当初看的时候却怎么也和第二章的剧情联系不起来，没想到在第三章却见到了被杀的狐狸和遁入空门的不空。再联想到黄眉倒果为因证人性本恶，或许当初书生的那个梦，便是黄眉的手法。\n祸乱人心，倒果为因，师兄如此执着输赢，可笑可悲\n第三章《屁》，除了剧情的震撼外，黄眉与金蝉子的对话更让人看完久久不能平静。惑乱人心，倒果为因。音乐更是完美的贴合剧情，我比较菜，不能分析出什么。但是可以看看这个视频国家一级演奏员钢琴奶奶赏析黑神话音乐《屁》，国家一级演奏员尹松奶奶的赏析，她在没有看动画情况下，仅仅只是听《屁》的音乐，就能从音乐中几乎准确的听出了动画的剧情走向。除了感叹尹松奶奶的专业能力和鉴赏能力以为，更感叹《屁》的音乐与动画剧情的切合之深。另外，《屁》的前面的吟唱，也和中国传统民间音乐“侗族大哥”相关，可以看看这个视频有讲：【屁】作曲博士听黑神话悟空配乐Reaction\n我是只猪，我也是蜘蛛\n第四章《勿听》，最泪目的一集之一（另一集是第五章动画）。当我还沉浸在好不容易过了百眼魔君这个自带空气墙的Boss的喜悦之时，《勿听》的出现，瞬间将我从喜悦带进到了美与凄中。我很喜欢游科在八戒这部分的改编。不仅仅是两人的爱情，还有像牛郎织女一样的有情人身处天地洪流间不得善终的悲戚。虽然很希望戒网能够是Happy Ending，但是或许正因为是BE，才更让我记忆深刻和被撼动。之前很好奇为什么天命人打百眼魔君时，八戒不会来帮忙，现在想想可能八戒不想让自己与紫蛛儿有太多交织，越是爱她，越是要分开，爱别离（此处突然想到姑（咕）获鸟，还不更）。舌尝思的莲蓬少了一颗莲子，希望是八戒偷偷扣去救紫蛛儿了吧。另外《勿听》的歌词写的极好，最后一句“下一世相遇，（男）请别再回眸/ （女）请记得回眸”，也十分符合八戒和紫蛛儿的心意。\n原来，我这样的人，只怕独自活着，便是罪过\n第五章《不由己》，最泪目的一集之一（另一集是第四章动画）。第五章是最悲剧的一章，也是我感觉最能体现黑神话内核的一章。东天与西天之争，牛魔王一家自从罗刹女被迫喝下子母河水时，便成为了天上两方争斗的一颗用之不足以变大局，弃之不可惜的棋子。老君留夜叉最后血脉，并不期望他能灭了灵山，只是顶多给灵山添堵，但天上神仙小打小闹，地上人魔却遭殃。无论牛魔王如何选择，都不会有两全之策，如同身本忧中并封一般，进退两难，不由己。另一方面是大圣与牛魔王的剧情，动画里大圣身死前的凄惨，牛魔王真正到怀抱着将死的弟兄才看懂过去的一切，仿佛命运给他开了一个巨大的玩笑。自己过去多年一直没有看懂大圣对其的保护和用心，今反而还大义灭亲，围剿大圣。但是大圣从未怪过，哪怕最后兵解前，也仍然继续开老牛的玩笑。\n你这老牛，真是晦气到家了。这一辈子就没选对过一次。\n与大圣结拜，共同反天庭，大圣看来老牛选错了，因为沾染了太多因果。而参与围剿大圣，也选错，但是我想大圣很希望老牛这样选，不会怪他。整个动画里以及游戏里的老牛，却真如牛一样，老实、沉默、隐忍，是顶好的一头牛啊，只可惜，生在棋盘中。整个动画里，牛哥一句话都没说过，但是仅仅从眼神就能体会到太多。（动画里大圣的配音太棒了！）另外，《不由己》的音乐，由八十多岁的陈彼得演唱，在游戏时哪怕看不见歌词，也能从中感受到英雄迟暮、进退两难的情绪。\n孙悟空，早就死了\n第六章《未尽》，倒叙方式回顾西游记的故事，对于国人来说，再看西游、再听云宫迅音，本身就是一件很泪目的事。在经历六章磨难，一路上见爱恨贪嗔痴，终于来到故事开始的地方。和八戒一样想着如果集齐六根，就能复活大圣，而老猴子那一句“孙悟空，早就死了”不仅让八戒破了防，也让我破了防。又经历大圣残躯的考验或者说是教诲之后，迎来结局。此时百感交集再看《未尽》，心里的确是五味杂陈。动画结尾，故事回到了西游最开始七大圣共饮、兄弟齐心，猴子猴孙齐力，放下酒杯却又转瞬物是人非，回到了游戏开始之时，花果山水帘洞内只剩大圣独饮，独自面对自己的命运，歌未尽，意难平。游戏结束，动画回到了游戏最开始的地方，游戏也可以再入轮回，大圣悟空也以天命人再续，但大圣还是大圣，悟空还是悟空吗？\n一些印象深刻的小地方 仿佛全世界都在玩这个游戏 从8月20号开始，仿佛全世界都在玩这个游戏。朋友圈、朋友之间讨论话题、游戏社区讨论、论坛、视频网站都充满了《黑神话》的内容。那种大家一起讨论Boss打法、隐藏攻略、游戏有趣点的状态，是之前从来没有体验过的，也是除了游戏本身带给我的乐趣之外的另一大乐趣。\n成就图标 Steam的成就是八十一个，刚好对应八十一难。而成就的图标，像是儿童手画，非常稚嫩又有趣。\n如这些：\n国人自己的游戏 经验叫道行、技能点叫灵光点、货币叫灵韵、传送叫缩地、武器叫兵器、装备叫披挂、背包叫行囊、图鉴叫游记/影神图、教程叫妙诀，就连加载游戏时候在提示，也是小诗或者文言白话……整个游戏从各个方面，无不在展示着中华文化和中华元素。非常自豪！\nReaction 最近在游玩之余，最大的一乐趣就是看外网主播们的Reaction。这个传统似乎从游科每年发布宣传片时，就有了。当时看完宣传片之后，就是等待勤劳的烤匠们烤制外网主播的Reaction。游戏发布后，Reaction太多太多，根本看不完。\n总结 目前完成了一周目，但是还有许多成就没有解锁，一些影神图没有仔细看，一些景色建筑没有仔细欣赏……总之，还有很多东西都没来得及体验，或许等之后某一天，有了高配置，有了足够让我慢下来的时间，我再来慢慢重走西游路。\n另外还有许多许多的感受和体验，一时回忆不起来，或者一时难以组织成语言，所以未写出。\n说到底，《黑神话：悟空》是个好游戏，顶好的游戏，10/10。\n","date":"2024-09-13T22:53:35+08:00","image":"https://oddyti.com/post/bmw/concept_hu10330521636774447548.jpg","permalink":"https://oddyti.com/post/bmw/","title":"《黑神话：悟空》：写给自己的碎碎念感想"},{"content":"初游午潮山 很好的路线，使我双腿颤抖，爱来自Oddyti\n很早之前偶然间看到附近午潮山路线的照片，山顶的照片，登高望远感觉非常棒，所以很早就萌生了去爬午潮山的想法。\n最近有些郁结，刚好所有期末报告都完成了，加上最近天朗气清，便择日不如撞日决定要独自去看看山顶的风景。\n前期准备 除老和山北高峰的两次经历外，我并无其他徒步或登山经历。遂去小红书和两步路了解情况。一番了解，难度较大、野路较多是出现最多的两个描述。不过风景的确很好，乃玉泉周边难得的高山（高于北高峰）。念及我自幼长于山野，曾经和村里小伙伴上山下河，偷菜野炊，区区野路，有何惧！（实际上还是有点担心的，但是登高望远的诱惑确实很大，也能排解郁结，所以还是去了）。\n权衡利弊下，选择了午潮山山脊环线路线，见上图。为何名之山脊环线，只因（警觉！）大部分路程都在山脊上（卫星图中可看出）。两步路已有好心人记录轨迹并附带详细的指引，其路程约7.5公理，爬升约400米，并下载好了离线轨迹以防无信号。\n行李：小包纸+湿巾X1，脆香米X1（超人？忍者神龟？），三粒装费列罗X1（纯属借着爬山机会解馋），上次买的水果还剩的梨X1（梨是伏笔），怡宝纯净水X1（个人钟爱怡宝），桃李面包X1，充电宝和充电线，塑料袋X1（装垃圾），日记本，钢笔。\n出发准备：于四食堂食不要汤鸡块拌面；于石马地铁站清空肠道（减重，很重要）\n正途 北门乘3号线地铁至石马C口，抬头见一高山，见下图最高山，实际看起来比图中还要高，自古便道“望山跑死马”，故叹曰：艹（语气词，无实意），这山怎么这么高，别告诉我今天要爬的山就是它吧（究竟是不是呢，买个关子先）？心中忐忑，却略有期待。\n步行至杭州市第二公墓，便来到了两步路路线起始点。看见了很多只狗狗（哇狗狗！），要是能有一只能陪着我上山就好了（妄想ing），忘记拍照了，不过返程时候拍了（见后文）\n匆匆告别短短的一段公路之后，便拐入了野路（怎么一来就上难度的），这一段野路爬升确实很快，因为不一会之后就开始气喘吁吁了。\n终于结束野路后，来到了午潮山惨案遗址（勿忘国耻）。\n然后便迎来了短短的不舍的一段马路和铺装路，来到了午潮山森林公园入口。\n好景不长，爬升一段之后，终于来到了正式登山的野路，但是此时已累的不行，亦开始后悔着羽绒服爬山。休整一段只好将羽绒服脱下装入背包。掏出洗好的梨（回收伏笔），精力瞬间MAX（啊真甜！）。\n继续出发，穿林过石，海拔也来到了312米。\n终于正式来到了山脊环线的山脊处，也是第一个可以眺望的点。箭头处便是最开始感叹“望山跑死马”的地点，从这里再回望很是开心。\n沿山脊行，右为城市机器轰鸣，左为山野寂静鸟语，很是奇妙。\n从此开始，便开始了整个山脊线最险峻也是风景最美丽也是最难爬的一段路，一路不断地艰难登顶，休整后又沿山脊下坡，再登顶，如此走完了整个北环线，大大小小登顶五六处。期间几为野路，不乏乱石嶙峋陡峭之处，需要手脚并用攀爬。如此多的登顶下山，期间我也知道了最开始的答案。\n在此（下图）呆坐几分钟，看层峦叠嶂，听鸟鸣。打开日记，记下前段的旅途见闻。并享用两颗美味的费列罗！剩一颗留着激励自己最后爬不动时候的奖励（萝卜与驴）。\n下图是此行到达的山顶中最美丽的山顶，从树林中穿出，豁然开朗！也是此行中最不想离开的地方。在此坐了十几分钟，补充体力。\n下山时，手脚并用的一处。\n西湖区和富阳的界碑（原来已经快出西湖区来到富阳了），在西湖和富阳之间反复横跳（诶我在西湖区，诶我又到富阳了，诶我又回西湖区了）。\n期间路上被一声很大声的布谷吓了一跳，之后还旁听了一场鸟儿们的辩论（正方说得对！）\n之后就是真正下山路，真正明白什么是上山容易下山难（但是下山确实没有上山累），很长一段充满落叶、陡林中土路。每一步都需要小心翼翼，侧着落脚，以防滑倒。\n终于回到了公路，这一段公路即是山脊环线的南环线部分，北环线在山脊穿行，而南环线便是美丽一段蜿蜒在山腰的公路。\n不知那位伤心小朋友的草莓熊最后落在这里了\n深山里竟然也有麦麦（麦门永存！）\n公路结束之后，便回到了午潮山森林公园大门。再次经过午潮山惨案遗址，总觉得该做点什么，便把脆香米放在了贡品的位置。\n最后一段野路，隔篁竹，闻水声。\n回到了第二公墓，遇见了狗狗们。这次拍照了。\n再次回望山顶，你已经被我征服啦！\n总结 9点40左右达到石马地铁站出发，14点左右回到石马地铁站。总用时3小时左右。很好的路线，使我双腿颤抖，爱来自Oddyti\n还是比较推荐的一个路线，有些难度，推荐结伴而行。\n","date":"2024-01-26T21:20:28+08:00","image":"https://oddyti.com/post/wuchao/%E5%91%86%E5%9D%903_hu14489866659832735538.jpg","permalink":"https://oddyti.com/post/wuchao/","title":"午潮山初游"},{"content":"学习类 一些忽视的科学道理，值得学习的回答\n程序员容易发音错误的单词\n计算机中的「null」怎么读？ - 钟千煅的回答 - 知乎 https://www.zhihu.com/question/549740924/answer/3363077599\n常见的一些厨艺原理\n为什么家里的长辈炒菜基本都会放葱姜蒜等调料，而对于部分年轻人似乎变得可有可无？ - 可乐猫的回答 - 知乎 https://www.zhihu.com/question/605464337/answer/3076857947\n趣味类 趣味的知识，趣味的事情\n方言冷知识\n有哪些方言土话其实是沿用古称，比如香菜叫芫荽(yán sui)，勺子叫「调羹」？ - 青城的回答 - 知乎 https://www.zhihu.com/question/43442602/answer/2784726804\n一些确实有趣的淘宝杂货铺\n淘宝上有哪些酒好不怕巷子深的特色店铺？ - 旺旺仔仔的回答 - 知乎 https://www.zhihu.com/question/374284453/answer/1367255724\n一个贴吧神贴\n百度贴吧里有哪些神贴？ - 墨染无迹的回答 - 知乎 https://www.zhihu.com/question/20011317/answer/3312657198\n正经解析Eminem\n阿姆（Eminem）是被吹出来的吗？ - 山岚的回答 - 知乎 https://www.zhihu.com/question/294200992/answer/532396690\n《The Wall》解析\n摇滚巨作Pink Floyd -《The Wall》完全收听指南 - 心窍EmptyHeart-Nex的文章 - 知乎 https://zhuanlan.zhihu.com/p/58790877\n魂类游戏\nSoul-like——我们怎样去定义魂系列游戏？ - 兔四的文章 - 知乎 https://zhuanlan.zhihu.com/p/25561558\n思考类 发人深省、值得思考\n批判的武器不等于武器的批判的理解\n如何理解批判的武器并不能等于武器的批判这句话？ - FlumenStellarum的回答 - 知乎 https://www.zhihu.com/question/51386485/answer/669796953\n","date":"2024-01-18T16:49:04+08:00","permalink":"https://oddyti.com/post/zhihu/","title":"知乎-趣味/思考/学习-回答收录"},{"content":"《怎样欣赏音乐》（What to Listen For in Music）是美国作曲家艾伦·科普兰的1939年的著作，是作者基于其1936到1937年的音乐知识讲座而写成的。在倾听章节中，作者将倾听音乐分为三个不同的阶段。但是需要强调的是，作者如此划分是便于之后的分析，并非意味着倾听音乐要刻意区分阶段。\n美感/感性阶段（The sensuous plane） 表达阶段（The expressive plane） 纯粹的音乐阶段（The sheerly musical plane） 美感/感性阶段（The sensuous plane） 美感/感性阶段是最简单的最纯粹的阶段。倾听音乐最简单的方法就是单纯的去听音乐的声响。 这个阶段我们倾听音乐，并不需要任何方式的思考。当然，这个阶段也不需要听者具有任何的音乐素养或知识，音乐声响的感染力是原始而强大的。只要有耳朵，就能听音乐。\n在最开始接触到西方音乐或者说严肃音乐时，我会发现一些很著名的曲目并没有那么好听，能吸引我的是德彪西的月光、肖邦的降E大调夜曲等等这种一听就会被其营造的氛围听感所吸引的曲目。这其中原因，也是这些曲目能直接在美感/感性阶段抓住我的耳朵。\n现在许多没有营养的口水歌能够收获许多的听众，其中一个原因就是其有较为好听的旋律和和弦进行。音乐的感染力是很原始强大的，以至于很容易就能从生理上达到对人类的吸引。“朗朗上口”、“旋律抓耳”、“节奏感强”，只要满足其中一点或两点，部分听众就能买账。而要达成这其中的一点或两点，套用几个已经很完善（用烂掉的）经典和弦进行，借用一点熟悉而又陌生的旋律，加上一套非常基础的鼓点，似乎就能达到部分听众的需求。再加上现在短视频平台的助力，一首口水歌也很容易获得惊人的流量。\n表达阶段（The expressive plane） 第二个阶段是表达阶段。也即是听音乐所表达的东西。要听这个阶段，可能需要了解一定的创作背景，创作主题，也可能需要具备一定的音乐知识。\n这个阶段解释了一个我最开始一些严肃音乐的困难，即没有歌词，并且许多的标题甚至只是一个序号。与流行乐有具体的标题和长段的歌词相比，我并不知道作曲家想要表达什么。但是一旦了解到一些背景，就会很快觉得一些音乐好听。例如维瓦尔第的四季协奏曲，因为维瓦尔第还给每首协奏曲前面加了一首解释的十四行诗，这极大的帮助了我听懂四季的表达阶段。又例如斯美塔那《我的祖国》的第二乐章《伏尔塔瓦河》，在了解了这首曲子的创作背景之后，再听时，就能很好的理解到《伏尔塔瓦河》通过音乐所描绘的情景。 但是，这并不意味着音乐都应该用明确的现实的某个涵义去确切定义。音乐所表达的涵义并不能都用语言表示清楚。好的音乐，每一次的倾听都能有细微的不同涵义。并且越是动听，越是难以找到使自己满意的言语来描述。音乐家可能会极端的说，音乐除了音符本身之外什么也不是。\n“当你把一首歌用语言确定下来之后，每当你重听时，也便几乎总是在向你诉说同样的事情了，所以你便觉得他变得枯燥无味了。”\n纯粹的音乐阶段（The sheerly musical plane） 纯粹的音乐阶段，需要听者具有音乐的知识，听者必须更有意识地聆听旋律、节奏、和声及音色这些音乐的本质要素。尤其重要的是，为了追随作曲家的思路，必须懂得一些音乐曲式的原理。聆听这一切要素就是在纯音乐的阶段欣赏音乐。\n如《伏尔塔瓦河》开始时，长笛的旋律的交错演奏和竖琴、弦乐跳动的拨弦演奏，很好的描绘出了伏尔塔瓦河源头水流潺潺和水花跳动的动感。\n总结 作者提出这三个倾听的阶段，并非是要我们独立的从各个阶段欣赏音乐。实际上，我们并不会单独的在某一个阶段上去倾听音乐，我们所做的是使各个阶段相互联系，同时以三个方式倾听，并且往往是无须思考，凭直觉的。 而三个阶段的存在，尤其是表达阶段和纯粹的音乐阶段，也侧面说明了了解一定的音乐知识，背景有助于提升音乐的欣赏能力。\n","date":"2024-01-05T16:34:27+08:00","permalink":"https://oddyti.com/post/listen-music/","title":"《怎样欣赏音乐》读后感 - 谈谈听音乐的历程"},{"content":"前几天网易云推送了今年的年度总结，其中有一个的四个季节最爱听的音乐感觉是最能触动我的。一直以来，往往我一首歌我会往复地听一段时间，而这个时间和一个季节的长短很符合。所以当年度总结中看到每个季节最爱听时，的确能让人回忆起当时（那段时间/那个季节）的情绪或者心情。所以便以这四首歌曲做一个回顾和推荐吧。\n春是刘森的《爱人穿过你》。我记得这首歌应该是因为最开始听刘森的《县城》而推送给我拍的。直到开始写这个总结时，我才认真去听这首歌的编曲和认真看歌词。这是一首初听就很容易被抓住并能快速直接的将它所想表达的情感和故事传递的歌。就像当初听《漠河舞厅》一样，思绪和情绪在吉他传来的那一瞬间我就被带入了。《爱人穿过你》的歌词以第二人称，以一种碎片化或者说蒙太奇的方式叙事，加上人声、吉他的些许混响（应该是混响吧），带来了一种远远的抽离感。但是第二人称的叙事，让听者仿佛就是主人公。而刚才那种抽离感，便仿似是内心活动的思绪，就像影视作品中表现主人公心理活动的内心独白效果一样，带点空灵和遥远，更加能让听者感觉刘森所表达的故事和情感，是来自听者内心。所以这首歌非常能令人带入。再加上弦乐在歌曲发展到高潮时恰到好处的加入，此时歌词的叙事也达到一个小高潮，即那句“她只是你问你天上的月亮圆不圆”，这里也是争端歌词中的“她”最直接的一次出现，而这次的出现却是一句不着边际的只是问月亮是否圆的询问。对“你”心中横着的一座山，“她”却只是如潮水一般安静，并不在意地问月。这其中的万般无所谓又会对“你”带来多少横在心中的山？但又问带来了多少“你”迷途知返却回头无岸的悔恨？\n不过话说回来，当时听这首歌的时候，并没有听出今天这么多的感悟。当时只是被这首歌里的情绪感染，被吉他、弦乐的编排打动了耳朵，被刘森像蒙太奇一样的些许抽象的歌词吸引。\n夏是来自电影《听见涛声》（又翻译为《海潮之声》）的同名主题曲。吉卜力工作室93年的一部作品，并不是宫崎骏执导，也不是久石让作曲。所以和其他的熟识的吉卜力工作室的作品风格不太一样。不过却能排到我心最喜欢的中吉卜力工作室电影的最前面（和龙猫一起）。当时是在HOPICO听到了这首曲子的安利，我就被当场拿下了！初听，像海浪一样，在平静中泛起一点点回忆。慢慢的，弦乐和吉他将人带入那段回忆中，平静之中起了波澜，泛起了浪花和波涛。直到小号的加入，将回忆的浪推至最高点，又将人释然地带回现实。如果再去看电影的话，便会发现电影仿佛是这首曲子的注解，而这首曲子是电影的凝练。\n秋是来自Cee/Lu1/蛋堡的《焦点/Highlight》。一首爵士说唱。这首歌有着非常吸引我的Beat。在钢琴Loop的铺垫下，小号和充满电子感的效果器响起时，便如同这首歌标题一样，焦点在午夜中刹那映照出光亮。些许破碎感的鼓声带来律动同时，贝斯的加入又为律动增添了更丰富的听感。其次是三位Rapper充满律动而又不会过于激烈的Flow。蛋堡这段Verse，也让人感叹不愧是你啊，蛋堡。歌曲的最后还来了一个致敬，直接放了Biggie的原声。总的来说，这是一首惬意、充满律动的爵士说唱。\n冬是来自Nate Ruess的It Only Gets Much Worse. 偶然间被推送到的一首歌，第一嗓子就把我吼醒了。这首歌让我想起了当初第一次听到Lukas Graham的7 Years的情况。最打动我的是这首歌传递出的力量感。歌手充满穿透的声线仿佛能直击心灵。弦乐的编排又能非常恰到好处的配合着人声的走向和歌曲情绪的递进。歌词中三个故事，以“All your love may fade away. All you\u0026rsquo;ll become may all go to waste. So I can\u0026rsquo;t stand to hear you say it hurts when it only gets much worse”为主题层层递进。从母亲告诉我，到我告诉爱人，再到最终这些言语烙印进心里。虽然其表达了一个残酷无奈的事实，但也传递出充满力量的豁达和乐观，能面对可能更糟的生活。\n","date":"2024-01-01T15:51:57+08:00","image":"https://oddyti.com/post/music-2023/bg_hu893745276058630714.png","permalink":"https://oddyti.com/post/music-2023/","title":"借2023年网易云四季最爱回顾推荐四首音乐"},{"content":"DOM(Document Object Model) DOM将网页所有内容都转换成了对象\nModel表示对象之间的关系，如父子、后代等\n网页中的每个对象都是一个节点(Node)\ndocument对象 document对象表示整个网页。\ndocument对象的原型链（继承链）\n1 HTMLDocument -\u0026gt; Document -\u0026gt; Node -\u0026gt; EventTarget -\u0026gt; Object.prototype -\u0026gt; null 原型链上的属性和方法都可以通过Document调用\n一些常用属性：\ndocument.documentElement document.head document.title document.body 元素节点 网页中，每一个标签都是一个元素节点对象\n通过document对象获取元素节点 document.getElementById() 根据元素id获取一个对象 document.getElementsByClassName() 根据元素class属性值获取一组元素对象 返回一个类数组对象，可索引，可遍历 该方法返回的结果是一个实时更新的集合 document.getElementsByTagName() 根据标签名获取元素对象 返回结果同样是实时更新 document.get ElementsByName() 根据name属性获取原属对象 常用于表单 返回结果同样实时更新 document.querySelectorAll() 根据选择器查询所有符合元素 不会实时更新返回结果 总会返回类数组 document.querySelector() 根据选择器返回第一个符合的元素 只返回一个元素 通过元素节点对象获取其他节点 区分元素和节点\nparent.getElementsByTagName() 可以通过父类获取后代中的元素 `element.childNodes 获取当前元素的子节点 包含空白子节点 不实用 element.children 获取当前元素的子元素 只取元素，不包括空白 element.fisrtElementChild 获取元素 element.nextElementSibling 获取下一个兄弟元素 element.parentNode 获取父节点 文本节点 DOM中，网页中所有的文本内容都是文本对象节点，包括空白\n可以通过元素获取其中的文本节点，但是通常不这样做\n可以直接通过元素去修改其中的文本\nelement.textContent 获取或修改元素中的文本内容 获取的是标签中的内容，不会考虑css样式 element.innerText 获取或修改元素中的文本内容 获取内容时，会考虑css样式 通过innerText读取CSS样式，会出发网页的重排 element.innerHTML 获取或修改元素中的HTML代码 可以读取到内容中的标签 可以直接向元素中添加HTML代码 innerHTML在插入内容时，有被xss注入的风险 属性节点 属性节点（Attribute）通常不需要获取对象而是直接通过元素即可完成对其的各种操作\n如何操作：\n方式一 读取：元素.属性名*（注意，class属性需要通过className来读取） 读取布尔值时，会返回true或false，但是disabled属性只要存在就默认disabled 修改：直接赋值就行 方式二 读取：元素.getAttribute(AttrName) 修改：元素.setAttribute(AttrName, Attr) 删除：元素.removeAttribute(AttrName) 事件 Event 用户和页面的交互行为，如：点击按钮、鼠标移动等等\n可以为事件绑定响应函数（回调函数）\n在事件的响应函数中，事件绑定给谁，其this就指向谁（箭头函数除外）\n绑定函数的方式：\n直接在元素属性中设置\n1 \u0026lt;button id = \u0026#34;btn\u0026#34; click = \u0026#34;alert(\u0026#39;haha\u0026#39;)\u0026#34;\u0026gt;click\u0026lt;/button\u0026gt; 可以通过为元素的执行属性设置回调函数的形式来绑定\n1 2 3 4 const btn = document.getElementById(\u0026#34;btn\u0026#34;); btn.onclick = function(){ ... } 不能重复绑定，一个事件只能绑定一个 重复绑定会覆盖 通过元素addEventListener()方法来绑定\n1 2 3 btn.addEventListener(\u0026#34;click\u0026#34;, function(){ ... }) 一个事件可以绑定多个事件 顺序执行 更推荐 文档的加载 网页是按html代码顺序加载，当Script标签在head里时，js代码无法获取DOM对象\n如何解决js代码无法获取DOM对象：\n将script标签写到body的最后（不要写到body外）\n通过window.onload()使代码在窗口加载完毕之后执行\n等待窗口中所有文档加载完毕才会触发 同上，通过window.addEventListener(\u0026quot;load\u0026quot;,function(){})\n通过document对象的DOMContenLoaded\ndocument.addEventListener(\u0026quot;DOMContentLoaded\u0026quot;, function(){}) 在当前文档加载完毕即触发（但是一个窗口可以不只有一个文档） 执行时机更早 将代码编写到外部js对象中，然后以defer的形式引入\n1 \u0026lt;script defer src = \u0026#34;./js/script.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; 早于DOMContenLoaded DOM的修改 主要讲元素的创建、替换与删减\n元素的创建与添加 创建元素 document.createElement(\u0026quot;li\u0026quot;) 添加元素 元素.appendChild(新元素) 给元素添加一个子节点 元素.insertAdjacentElement() 两个参数：1 添加位置 2 添加的元素 可以给元素添加兄弟节点或子节点 一些位置：\u0026quot;befoeend\u0026quot;, \u0026quot;afterbegin\u0026quot;,beforebegin,afterend 元素.insertAdjacentHTML() 插入HMTL代码 元素的替换 元素.repalceWith(新元素)\n元素的删除 元素.remove()\n","date":"2023-12-11T13:42:37+08:00","permalink":"https://oddyti.com/post/dom-study/","title":"DOM学习记录"},{"content":"散点 script type默认javascript 不要用自闭合标签 JS框架 jQuery: 实质是方法库 Angular: 模块化开发 React: 虚拟DOM Vue: 综合了Angular和React的优点 Axios: 前端通信框架 前言 ECMAScript是JS的一个标准，最新版本到ES6，但是大部分浏览器仍然用ES5\n所以目前开发环境和线上环境不一致\n变量：let\n常量：const\n变量存的是内存地址，并不是存的值，如果是同样的内容（值），则两个变量会指向同一个内存 常量锁死的不是指向的内存内容而是常量存的内存地址 规范：\n通常驼峰命名：maxLength 类名大驼峰命名：MaxLength 常量一般全大写：MAX_LENGTH 类型 类型视为值的集合。\nJavaScript 区分两种值：原始值和对象，如图。\n散点 区分值与变量：变量里存的是值\n数值并不是无限大，超过一定范围后会近似\n非常大会变成Infinity\n高精度计算要注意，容易出问题\nNaN也是一个特殊的数值，标识非法的数值\n大整数BigInt：\n以n结尾，表示比较大的整数，范围与内存有关 a = 9899999999998999999n 字符串\n单引号活双引号都可以。\n1 2 a = \u0026#39;hello\u0026#39; a = \u0026#34;hello\u0026#34; 模板字符串：\n1 a = `hello` 可以保存字符串中的空格、跨行 嵌入变量（类比格式输出） 1 2 3 4 5 let name = \u0026#34;hello\u0026#34;; let str = `hi, ${name}`; consle.log(str); \u0026#34;hi, hello\u0026#34; 原始值 原始值一共七个：\nNumber BigInt String Boolean Null Undefined Symbol 原始值不可变，一旦创建不可更改（指内存中的数据（值）不能更改）\n对象 对象单独成章节，点此跳转\n类型检查 typeof进行值类型检查（注意检查的是值的类型，不是变量的类型，是变量里存的值的类型。\n1 console.log(typeof a) 类型转换 类比matlab中的str2num函数\n转换为字符串 两种显式类型转换：\n调用toString()方法\n1 2 let a = 10; a = a.toString(); 注意null和undefined没有toString()方法\n调用String()函数\n1 2 let a = 10; a = String(a); String()函数可以将null和undefined值转换为字符串\n对于拥有toString()方法的值调用String()函数时，实际上就是在调用toString()方法 对于null,则直接转换为\u0026quot;nulL\u0026quot; 对于undefined，直接转换为\u0026quot;undefined\u0026quot;\n实际上是根据原有的值在内存中创建新的字符串，并将变量的保存的地址指向新的字符串内存\n转换为数值 将任意的数值类型转换为数值：使用Number()函数\n1 2 3 4 5 let a = \u0026#39;123\u0026#39;; a = Number(a); console.log(a); ---- number 123 字符串\n合法数字，则转换为对应的数值 非法数字（如'abc'），则转换为NaN 空串，则转换为0 布尔值\ntrue -\u0026gt; 1 false -\u0026gt; 0 null\n0 undefined\nNaN 将字符串转换为数值\nparseInt()将字符串转换为整数 可以用于非法数字字符串，解析时，会左到右读取一个完整的整数，并返回，如果第一位不是数字，则返回NaN 123ab12 \u0026ndash;\u0026gt; 123 可以用于小数取整，但不是取整的最佳选择 parseFloat()将字符串转换为浮点数 解析同上 转换为布尔值 使用Boolean()函数将其他数值类型转换为布尔值\n解析类同C语言：0,NaN,undefined,null解析为false，空串为false\n运算符 算术运算符 这里记录一些和其他语言不同的点。\n幂运算：** 取模：% 自动类型转换 JS为弱类型语言，运算时会进行自动类型转换。除字符串加法外，其他运算当其他操作数是非数值时，都会转换为数值。而字符串加法会将数值也转换为字符串，进行字符串拼接操作\n1 2 3 4 5 a = 10 - \u0026#39;5\u0026#39; // 10 - 5 a = 10 + true // 10 + 1 a = 10 + null // 10 + 0 a = 10 - undefined // 10 - NaN a = 10 + \u0026#39;2\u0026#39; // \u0026#39;10\u0026#39; + \u0026#39;2\u0026#39; **利用自动类型转换进行类型转换: **加上一个空串''\n1 2 3 a = ture a = a + \u0026#39;\u0026#39; console.log(typeof a, a) // string true 赋值运算符 JS也可以直接用=+ 一元正负运算符 +a，-a表示将变量a取相反数，可以用来对非数值进行数值转换\n1 2 3 a = \u0026#39;123\u0026#39; a = +a console.log(typeof a, a) // number 123 自增自减 同C语言\n前自增：++a，先对a自增，再返回自增后的a\n后自增：a++，先返回自增前的a，再对a自增\n1 2 3 4 5 6 a = 1 b = a++ // b = 1 a = 1 a++ b = a // b = 2 逻辑运算符 同C，但是同样会有自动的类型转换，同样可以利用这个自动类型转换将其他类型转换为布尔值。\n关系运算符 注意：非数值比较，会自动转换为数值，但是两个字符串比较除外，而是会逐位比较字符的Unicode编码（这点同C）\n相等运算符和全等运算符 **相等运算符: **==比较两个值是否相等，但是会自动进行类型转换\n通常转换为数值 null == undefined比较时除外，会返回true NaN不和任何值相等、比较，包括自身，结果都是false 判断值是否是NaN，使用函数isNaN() **全等运算符: **===比较，但是不会自动类型转换，类型不同直接返回false\n所以通常使用全等运算符\n同样的有不等运算符!=和不全等!==运算符\n条件运算符 :?同C\n流程控制语句 代码块 使用{}创建代码块，代码块内的let声明的变量具有局部变量属性（块作用域），var声明的变量不具有（块作用域）\nif语句 同C\n1 2 3 4 5 6 7 if(true){ alert(\u0026#39;hello\u0026#39;) }else if{ ... }else{ ... } switch语句 case一旦满足，便会执行之后的所有语句，所以注意用break避免执行之后的语句\n1 2 3 4 5 6 7 8 9 10 11 switch(num){ case 1: ... break case 2: ... break default: ... break } 循环语句 基本同C\nwhile语句 1 2 3 while(a\u0026lt;2){ ... } do-while语句 1 2 3 4 5 do{ ... }while{ ... } for语句 1 2 3 for(let i = 1;i++;i\u0026lt;5){ ... } break和continue 同C\n对象 数据类型\n原始值：\n数值 Number 大整数 BigInt 字符串 String 布尔值 Boolean 空值 Null 未定义 Undefined 符号 Symbol 对象：\n同其他语言的对象\n对象操作 1 2 3 4 5 6 7 8 9 10 11 12 13 // 对象创建 let obj1 = new Object() let obj2 = Object() // 修改属性 obj1.name = \u0026#39;hahah\u0026#39; obj1[socre] = 123 // 属性嵌套 obj.f.name = \u0026#39;123\u0026#39; obj.f.score = 123 // 删除属性 delete obj.name // in 运算，检查对象是否含有某属性 \u0026#39;name\u0026#39; in obj // 返回true or false 如果读取未创建的属性，会返回undefined\n属性名相关 属性名是一个字符串，可以为任何值\n如果属性名太特殊，需要使用[]设置 如果用符号symbol作为属性名，也需要用[]设置 使用[]操作属性时，可以使用变量访问 1 2 3 4 5 6 7 8 let obj = Object() let mySymbol = Symbol() let str = \u0026#39;address\u0026#39; obj[al@@lkjer!!] = \u0026#39;haha\u0026#39; obj[mySymbol] = \u0026#34;hahah\u0026#34; obj[str] = \u0026#39;hahah\u0026#39; // 等价于obj[\u0026#39;address\u0026#39;] = \u0026#39;hahah\u0026#39; console.log(obj[str]) 对象的字面量 创建对象的另一种形式\n1 2 3 4 5 6 7 let mySymbol = Symbol() let obj = { name: \u0026#34;haha\u0026#34;, age: 19, [\u0026#34;gender\u0026#34;]: \u0026#39;male\u0026#39; [\u0026#34;mySymbol\u0026#34;]: \u0026#39;symbol\u0026#39; } 枚举对象属性 类似Python\n1 2 3 4 5 6 7 8 9 10 11 12 13 let mySymbol = Symbol() let obj = { naem: \u0026#39;a\u0026#39;, age: 19, gender: \u0026#39;male\u0026#39;, address: \u0026#39;home\u0026#39;, [mySymbol]: \u0026#39;符号属性\u0026#39; } for (let propName in obj){ console.log(propName) console.log(obj[propName]) } 不可枚举属性\n并非所有的属性都可以被枚举，例如符号属性\n对象的变量类型 对象属于可变类型\n当对两个对象变量进行相等或者却等比较，比较的是内存地址 如果有两个变量同时指向同一个对象，那么如果通过一个变量修改对象，另一个变量也会改变\n垃圾回收 Garbage Collection 垃圾：没有任何变量对其进行饮用的对象称为垃圾\nJS中有自动垃圾回收机制，这些对象回被解释器回收，无需手动处理\n函数 函数也是一个对象\n函数对象的创建与参数传递 函数参数传递数量不对应，不会报错，如果多了不用，少了undefined（或者默认值）\n创建函数时，可以指定默认值\n函数创建时，定义形参就相当于在函数中声明了变量，只是没有赋值\n函数声明\n1 2 3 4 function myFun(a = 1,b = 2){ ... } myFun(c,d) 函数表达式\n1 2 3 4 const myFun = function(a,b){ ... } myFun(c,d) 箭头函数\n1 2 3 4 const myFun = (a,b) =\u0026gt; { ... } myFun(c,d) 当箭头函数只有一个参数的时候，括号可以不写\n1 2 3 4 const myFun = a =\u0026gt; { console.log(a) } myFun(1) 对象作为参数传递 对象作为参数传递时，传递的是对象的地址，可以理解为传递指针（即函数内通过变量修改对象，则原变量的对象也会一同修改）\n1 2 3 4 5 6 let a.name = \u0026#39;a\u0026#39; let fn = (a) =\u0026gt; { a.name = \u0026#39;b\u0026#39; console.log(\u0026#39;name\u0026#39;, a) } console.log(\u0026#39;name\u0026#39;, a) 函数作为参数传递 见高阶函数\n函数的返回值 同C\n任何类型值都可以作为返回值，对象、函数 如果return后面不跟值，相等于返回undefined 如果不return，也相等于返回undefined 箭头函数的返回值 如果箭头函数只有一个语句直接并返回，则返回值可以直接写在箭头后面\n如果要直接返回对象的字面量，由于对象的大括号和代码块的大括号相同，所以需要用()括起来\n1 2 3 4 5 6 7 8 9 const sum = (a,b) =\u0026gt; { return a+b; } // 等价于 const sum = (a,b) =\u0026gt; a + b let result = sum(123,456) // 直接返回对象 const sum = (a,b) =\u0026gt; ({name: \u0026#39;haha\u0026#39;}) 可变参数 arguments 用于存储函数传入的实参，无论函数是否定义形参，实参都会被储存\n可以通过arguments访问实参\n函数中的另一个隐含参数\n是一个类数组对象（伪数组）\n通过arguments可不受参数数量限制更加灵活的创建函数\n箭头函数没有arguments\n如创建一个计算任意数量数之和的函数\n1 2 3 4 5 6 7 8 9 10 function sum(){ let temp = 0; for(let num of arguments){ temp += num; }; console.log(temp); return temp; } sum(1,2,3,4,5,6); 可变参数 定义函数时，可以将参数指定为可变参数，可以接收任意数量的实参\n1 2 3 function fn(...args){ console.log(args); }; 可变参数的作用基本上和arguments一致，但是：\n可变参数名称自定义 可变参数是数字，不是伪数组，可以使用数组的方法 可变参数可以和其他参数一起使用，即函数可以既有普通参数，又有可变参数 可变参数在创建时放在最后 例题：创建一个计算任意数量数之和函数\n1 2 3 4 5 function sum(...num){ return num.reduce((a,b) =\u0026gt; a+b); }; sum(1,2,3,4,5,6) 高阶函数 函数的参数也可以是函数，如果一个函数的参数或返回值是函数，则这个函数称为高阶函数。\n将函数作为参数，意味着可以对另一个函数动态传递代码 回调函数（函数作为参数） 如果将函数作为参数传递，称这个函数为回调函数\n需求：在不修改原函数的情况下，改变其语句以改变功能\n可以将语句或表达式通过回调函数的方式传递到函数内\n引例：如果想要修改filter()函数中的条件\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 function filter(arr, fn) { for (let i = 0; i \u0026lt; arr.length; i++) { // 等价于 arr[i].age \u0026lt; 18 if (fn(arr[i])) { console.log(arr[i].name); }; }; } // 这样就可以修改这个回调函数来传入不同的判断条件 function fn(a) { return a.age \u0026lt; 20; }; const personArr = [ {name:\u0026#39;Tom\u0026#39;,age:18}, {name:\u0026#39;Bill\u0026#39;,age:20}, {name:\u0026#39;Cathy\u0026#39;,age:3}, {name:\u0026#39;Dutch\u0026#39;,age:45} ]; result = filter(personArr, fn) 但是通常回调函数直接用匿名函数\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 function filter(arr, fn) { for (let i = 0; i \u0026lt; arr.length; i++) { // 等价于 arr[i].age \u0026lt; 18 if (fn(arr[i])) { console.log(arr[i].name); }; }; } const personArr = [ {name:\u0026#39;Tom\u0026#39;,age:18}, {name:\u0026#39;Bill\u0026#39;,age:20}, {name:\u0026#39;Cathy\u0026#39;,age:3}, {name:\u0026#39;Dutch\u0026#39;,age:45} ]; result = filter(personArr, a =\u0026gt; a.age \u0026lt; 20); result = filter(personArr, a =\u0026gt; a.age === 3); 函数作为返回值 高阶函数的返回值可以是函数\n需求：在不修改原函数的基础上，扩展其功能\n思路：将原函数传递到新的函数中，并扩展功能，包装好之后返回一个函数\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 // 在不改变someFn()的情况下，扩展其功能，能先说一句\u0026#39;good morinig\u0026#39; function someFn(){ console.log(\u0026#39;Tom\u0026#39;) return \u0026#39;Tom\u0026#39;; }; function outer(cb){ return () =\u0026gt; { console.log(\u0026#39;good morning\u0026#39;); const result = cb(); return result; } } let result = outer(someFn); result(); // 如果此时有一个输出\u0026#39;Mike\u0026#39;的函数，也想要一个先说一句\u0026#39;good morning\u0026#39;的功能，则就可以直接用outer() function mike(){ console.log(\u0026#39;Mike\u0026#39;); return \u0026#39;Mike\u0026#39;; }; let newMike = outer(mike); newMike(); 闭包 引例 创建一个函数，第n次调用打印\u0026rsquo;n'\n简单思路：外部变量/全局变量，但是不推荐\n可以利用函数来隐藏不希望被外部访问的变量\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 function outer(){ // 外部函数 let num = 0; // 隐藏变量 return () =\u0026gt; { // 内部函数 num++; console.log(num); } } const newFn = outer(); newFn(); // 0 newFn(); // 1 newFn(); // 2 num = 5; newFn(); // 3 闭包 **闭包：**闭包就是能访问到外部函数作用于中变量的函数（如上面outer()返回的函数）\n**场景：**当我们希望隐藏不希望被别人访问的内容\n闭包的构成条件：\n函数的嵌套 内部函数要引用外部函数中的变量 内部函数要作为外部函数的返回值返回 词法作用域 **函数作用域：**函数的作用域，在函数创建时（定义时）就已确定（词法作用域），与函数的调用位置无关（赋值位置也无关）\n例子：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 let a = \u0026#39;全局a\u0026#39;; function fn(){ console.log(a); }; function fn2(){ let a = \u0026#39;fn2中的a\u0026#39;; fn(); } function fn3(){ let a = \u0026#39;fn3中的a\u0026#39;; function fn4(){ console.log(a); }; return fn4; } fn2(); // output: 全局a let fn4 = fn3(); fn4(); // output: fn3中的a // 即使fn()在fn2中被调用，但是其作用域在全局作用域，和调用位置无关 闭包的注意事项 闭包的生命周期 闭包在外部函数调用时产生，外部函数每次调用都会产生一个全新的闭包，并且独立 在内部函数丢失时销毁（内部函数被垃圾回收了，闭包才会消失） 注意事项 主要是用来隐藏一些不希望被外部访问的内容 闭包空间占用较大，相较于类而言，闭包浪费内存空间 递归 类C\n性能差\n复杂，容错率低\n只在一些使用循环解决比较麻烦的问题才使用递归\ncall和apply 需要先了解函数的this\n以函数形式调用，this是window 以方法形式调用，this是调用方法的对象 构造函数中，this是新建的对象 箭头函数没有自己的this 函数调用，还可以通过调用函数的call()和apply()方法来调用函数\ncall() 和 apply()可以用来指定函数的this call()和apply()的第一个参数，将会成为函数的this call()方法调用函数，函数的实参跟在第一个参数之后 apply()方法调用函数，实参在第一个参数之后以数组形式传递 1 2 3 4 5 6 7 fucntin fn(a,b){ console.log(\u0026#39;函数执行\u0026#39;,a,b); }; const obj = {name:\u0026#39;tom\u0026#39;, fn}; fn.call(obj, 1, 3); fn.apply(obj, [1,3]); bind() 是函数的方法，可以用来创建一个新的函数\nbind()可以为新函数绑定this，绑定的this无法更改 可以为新函数绑定参数，绑定的参数无法修改 1 2 3 4 5 6 7 8 9 fucntin fn(a,b){ console.log(a,b); }; const obj = {name: \u0026#39;Tom\u0026#39;}; const fn2 = fn.bind(obj，1，2); fn2.call({}) // 无效 fn2(3,4) // output: 1,2 因为被绑定参数，所以仍然输出1，2 箭头函数没有自身的this，它的this由外层作用域决定，也无法通过call, apply, bind修改其this\n作用域(scope) 全局作用域 在网页关闭时销毁\n局部作用域 代码块\n作用域链 解释器会优先在当前作用域寻找变量，如果找不到则取上一层作用域寻找\n1 2 3 4 5 6 7 8 9 let a = 1 { let a = 2 { let a = 3 console.log(a) } } // output: 3 Window对象 浏览器提供了以个Window对象，可以直接访问\n可以对浏览器窗口进行各种操作\n还负责存储JS中的内置对象（如String）和宿主对象（alert()）\nWindowd对象的属性，可以直接访问，也可以通过Window对象访问\n1 2 window.console.log(\u0026#39;hello\u0026#39;) console.log(\u0026#39;hello\u0026#39;) 使用var声明的变量，都会作为window对象的属性，所以是全局作用域\n使用function声明的函数，都会作为window对象的方法\n当let声明的变量和window属性都存在时，会优先访问let声明的变量\nvar虽然没有块作用域，但是依然有函数作用域\n如果直接声明变量，则默认为window的属性\n1 2 a = 10 // window.a = 10 提升 变量的提升 使用var声明的变量，会在所有代码执行前被声明，但不是赋值，只是声明 1 2 3 console.log(a) var a = 10 // output: undefined 提升在函数内也适用 1 2 3 4 5 6 7 8 9 var a = 1 function fn(){ console.log(a) // undefined 函数内被提升 var a = 2 console.log(a) // 2 var声明在函数内不具有全局变量属性 } fn() console.log(a) // 1 // output: undefined 2 1 函数的提升 同C，函数声明会在其他代码执行前被创建。注意只能是函数声明的方式才会提升（function开头）\n1 2 3 4 5 fn() function fn(){ ... } let声明提升 实际上提升了，但是在赋值之前解释器禁止访问该变量\n立即执行函数 可以利用这个创建一次性的函数作用域，避免变量冲突\n创建函数并直接加上()，立即执行，如果用function创建，需要再加上外围括号，避免函数提升\n1 2 3 (function(){ ... }()); this 类似python里的self\n函数再执行时，JS解释器每次会传递进一个隐含的参数this\nthis会指向对象，而函数其实是window对象的方法，所以如果以函数调用，this指向的是window对象\n注意，无论function函数再哪儿创建，在哪儿调用，只要是调用函数（不是调用方法），其函数的this指向window\n如果调用其他对象的方法，this会指向该方法的对象\n1 2 3 4 5 6 7 8 function fn(){ console.log(this) // this === window } fn() let obj = {name: \u0026#39;ha\u0026#39;} obj.fn = fn obj.fn() // this === obj 所以可以类比python对象的操作，通过this调用对象的属性\n1 2 3 4 5 6 let obj = { name: \u0026#39;123\u0026#39;, fn: funtion(){ console.log(this.name) }, }; 箭头函数的this 与function函数的区别，箭头函数的this无论调用方式如何，其this指向外层\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 const obj = { name: \u0026#39;123\u0026#39;, func(){ function f1(){ console.log(\u0026#39;this\u0026#39;,this) // window } f1() const f2 = () =\u0026gt; { console.log(\u0026#39;this\u0026#39;,this) // obj } f2() } } 面向对象 类比python\n类 类比python class\n1 2 3 4 5 6 7 8 9 // 创建类 class ClassName {}; // 类名使用大驼峰命名法 const ClassName = class {}; // 通过类创建对象（实例） const p1 = new ClassName() // intanceof 检查对象是否为某个类的实例 console.log(p1 in ClassName) // true 类的代码块，默认严格模式 属性 类的属性分为：\n实例属性：通过类创建的实例也会拥有 静态属性：类独有，只能通过类访问，无法通过实例访问 1 2 3 4 5 class Person{ name = \u0026#39;123\u0026#39; // 实例属性 static age = 12 // 静态属性 } 方法 同样的有实例方法和静态方法。实例方法有两种创建方式，一般而言用第二种\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 class Person{ name = \u0026#39;123\u0026#39; // 实例属性 // 实例方法创建1（不常用） sayHello1 = function(){ console.log(this.name) } // 实例方法创建2（常用，类似python） sayHello1(){ console.log(this.name) } // 静态方法创建 static sayHello3(){ console.log(this.name) } } 构造函数（构造方法）（构造器） 构造函数会在调用类创建对象（实例）时执行 而创建实例时传递的参数，会传递进类的构造函数中 1 2 3 4 5 6 7 8 class Person{ constructor(a,b,c){ console.log(a,b,c) } } const p1 = new Person(1,2,3) // output: 1 2 3 所以可以在构造函数中为实例的属性进行赋值，从而达到创建实例时参数传递\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 class Person{ name; age; gender; constructor(name,age,gender){ this.name = name; this.age = age; this.gender = gender; }; }; const p1 = new Person(\u0026#39;A\u0026#39;,18,\u0026#39;Male\u0026#39;); console.log(p1); // Person {name: \u0026#39;A\u0026#39;, age: 18, gender: \u0026#39;Male\u0026#39;} 面向对象编程 封装、继承、多态\n封装 对象不仅存储属性，还需要负责数据的安全，则如何确保数据的安全？\n1. 私有化属性数据 在类中，使用#开头创建私有属性，该属性无法被实例所访问，只能在类内部访问\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 class Person{ #name; #age; #gender; constructor(name,age,gender){ this.#name = name; this.#age = age; this.#gender = gender; }; }; const p1 = new Person(\u0026#39;A\u0026#39;,18,\u0026#39;Male\u0026#39;); console.log(p1); // Person {name: \u0026#39;A\u0026#39;, age: 18, gender: \u0026#39;Male\u0026#39;} 2. 私有化属性访问和修改：setter和getter方法来开放对数据的操作 曲线救国：创建方法，并且可以在方法中实现对数据的合法性验证\ngetter外部访问：在类中构建一个方法，返回私有属性实现访问 setter外部修改：在类中创建方法，传递参数进行修改 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 class Person{ #name; #age; #gender; constructor(name,age,gender){ this.#name = name; this.#age = age; this.#gender = gender; }; getAge(){ return this.#age; } setAge(age){ // if ... this.#age = age; }; }; const p1 = new Person(\u0026#39;A\u0026#39;,18,\u0026#39;Male\u0026#39;); console.log(p1.getAge()); p1.setAge(12); console.log(p1.getAge()); **简化：JS提供简化方法: **使用get和set创建方法，既能实现私有化访问和修改，也能简化访问和修改的操作\n1 2 3 4 5 6 7 get 属性名(){ return this.#属性; } set 属性名(参数){ this.#属性 = 参数; } 例子：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 class Person{ #name; #age; #gender; constructor(name,age,gender){ this.#name = name; this.#age = age; this.#gender = gender; }; get age(){ return this.#age; } set age(age){ // if ... this.#age = age; }; }; const p1 = new Person(\u0026#39;A\u0026#39;,18,\u0026#39;Male\u0026#39;); console.log(p1.age); p1.age = 12; console.log(p1.age); 多态 JS中不会检查参数的类型，意味着任何数据都可以作为参数传递（很像pyhton和matlab），即函数的参数类型多态\n继承 继承：使用extends关键字来进行类的继承\n重写：在子类中，可以通过创建同名方法来重写继承到的方法\n增加：构造函数也可以重写，但是重写的第一行代码应为super(参数)并传入父类的参数\n调用父类：在父类中，可以通过super调用父类\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 class Animal{ constructor(name){ this.name = name; }; sayHello(){ console.log(\u0026#39;hello\u0026#39;); }; } class Dog extends Animal{ constructor(name,age){ super(name); this.age = age; } sayHello(){ super.sayHello(); console.log(\u0026#39;wang\u0026#39;); } }; const dog1 = new Dog(\u0026#39;tom\u0026#39;, 12); console.log(dog1); dog1.sayHello(); OCP 开闭原则：程序应该对修改关闭，对扩展开放\n对象的内存结构 对象中，存储属性的区域有两个：\n对象自身 直接通过对象所添加的属性 在类中通过x = y的方式添加的属性 通过xxx = function(){}添加的方法 在自身中，__proto__属性储存了原型对象的地址 原型对象 直接定义的方法，如sayHello() constructor() 主动向原型中添加的属性或方法 访问对象属性时，优先访问对象自身\n如下对象：\n1 2 3 4 5 6 7 8 9 class Person{ name = \u0026#39;Tom\u0026#39;; sayHello(){ console.log(\u0026#39;hello, I am\u0026#39;, this.name); }; }; const p = new Person(); console.log(p) 原型对象 访问：\n使用Object.getPrototypeOf(p)进行访问，不建议通过p.__proto__访问（避免修改原型对象）。 原型对象中的数据：\n对象的数据 constuctor() 原型对象也是对象，所以原型对象也有自己的原型对象，但是原型对象的原型对象没有原型对象，构成了一个原型链，根据对象的复杂度不同，原型链的长度也不同\n原型链 读取对象属性时，会顺着原型链向上寻找，先自身，如果没有找原型，再没有找原型的原型\u0026hellip;没找到返回undefined\n寻找变量，作用链，找不到报错\n原型的作用 所有的同类型对象，它们的原型对象都是同一个，意味着其原型链相同。\n**原型的作用：**原型相当于公共区域，该类所有实例所有的公共属性（方法）都同意储存到原型中，大大减小了内存资源花费\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 class Animal{ constructor(name){ this.name = name; }; sayHello(){ console.log(\u0026#39;hello\u0026#39;); }; }; const dog1 = new Animal(); const dog2 = new Animal(); console.log(dog1.__proto__ === dog2.__proro__); // output: true // dog1 --\u0026gt; object --\u0026gt; Object原型 --\u0026gt; null // dog2 --\u0026gt; object --\u0026gt; Object原型 --\u0026gt; null 继承与原型 继承：继承时，子类的原型实际就是父类的实例\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 class Animal{ constructor(name){ this.name = name; }; sayHello(){ console.log(\u0026#39;hello\u0026#39;); }; } class Dog extends Animal{ } }; // Dog --\u0026gt; Animal --\u0026gt; object --\u0026gt; Object原型 --\u0026gt; null class Cat extends Dog { }; // Cat --\u0026gt; Dog --\u0026gt; Animal --\u0026gt; object --\u0026gt; Object原型 --\u0026gt; null *原型的修改 大部分情况下，不需要修改原型对象\n不要通过类的实例取修改原型，很危险，尤其不要p.__proto__ = new ClassName() 通过类的prototype属性访问并修改类的实例的原型对象\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 class Animal{ constructor(name){ this.name = name; }; sayHello(){ console.log(\u0026#39;hello\u0026#39;); }; } const d = new Animal(); console.log(d); Animal.prototype.fly = () =\u0026gt; { console.log(\u0026#39;fly~\u0026#39;); }; console.log(d.fly()); instanceof和hasOwn instanceof检查对象是否是某个类的实例（包括继承类）\n实际是检查该对象的原型链是否含有该对象的类，如果有则返回true\n1 2 3 4 5 6 7 class Animal{}; class Dog extends Animal{}; const dog = new Dog(); // 原型链: dog --\u0026gt; Dog(Animal实例) --\u0026gt; Animal(Object实例) --\u0026gt; Object原型 console.log(dog instanceof Dog) // true console.log(dog instanceof Animal) // true console.log(dog instanceof Object) // true 检查是否含有属性\n属性名 in 对象，无论在对象自身还是在原型链中都会返回true 对象.hsaOwnProperty(属性名)，不推荐使用，只有在对象自身含有属性才会返回true Object.hasOwn(对象, 属性名),建议使用, 只有在对象自身含有属性才会返回true 旧类 采用function创建类\nnew运算符 创建对象时使用的运算符\nnew - JavaScript | MDN (mozilla.org)\n包装类 在JS中，除了直接创建原始值以外，也可以创建原始值的对象，但是不要这样做\n通过new String()创建String类型的对象 通过new Number()创建Number类型的对象 通过new Boolean()创建Boolean类型的对象 包装类 JS中一共有5个包装类：\nString Number Boolean BigInt Symbol 通过包装类可以将一个原始值包装为一个对象，当我们对一个原始值调用方法或属性时，JS解释器会临时将原始值包装为对应的对象，然后调用这个对象的方法\n这解释了为什么可以直接对一些原始值调用一些方法，例如toString() 注意是临时，即不破坏原始值，调用结束就失效 这样原始值对象的方法可以直接通过原始值调用（具体方法可以查询） 1 2 3 let num = 11; num = num.toString(); console.log(typeof num, num) // string 11 字符串包装类方法介绍 字符串（包装类）所有属性和方法都是不可破坏性\n查资料吧String.prototype.match() - JavaScript | MDN (mozilla.org)\n数组 类似其他语言\n数组可以非连续，但是使用时尽量避免非连续 数组也是对象（typeof: object） 1 2 3 4 5 6 7 // 创建数组 const arr1 = new Array(); const arr2 = [1,2,3]; // 索引从0开始 arr1[0] = 1; // 获取数组长度(返回最大索引+1) arr1.length; 小技巧：append操作 1 arr[arr.length] = 1; 小技巧：快速删除多个元素 1 arr.length = 10 数组遍历 for循环 不过多赘述\nfor-of语句 类似于python的in\n1 2 3 for (let i in arr){ console.log(i); }; 不止用于遍历数组，可迭代对象都可以，如字符串遍历\n1 2 3 4 const str = \u0026#39;hello\u0026#39;; for(let i in str){ console.log(i); }; forEach()见下文 数组方法介绍 Array.isArray()检查对象是否为数组 at(index)数组索引，支持负数（反向索引） arr3 = arr1.concat(arr2)数组拼接，非破坏，支持多个拼接 indexOf('abc', 3)返回元素从起始位置开始第一次出现的索引，无返回-1 lastIndexOf('abc',3)返回元素最后一次出现位置，无返回-1 join('_')数组元素拼接为一个字符串，默认为逗号连接符 slice(0,2)切片，左闭右开原则 slice(1)从1开始到所有 slice()浅拷贝 数组的方法 push()\n破坏性方法 入栈（末尾），等于python的append，可以push多个元素 返回新数组的长度 pop()\n破坏性方法 出栈（末尾） 删除并返回数组的最后一个元素 unshift()\n破坏性方法 向数组开头添加一个或多个元素 返回新的长度 shift()\n破坏性方法 删除并返回数组的第一个元素 splice(index, num, a)\n破坏性方法 可以删除、添加、插入、替换数组中的元素 index: 删除的起始位置 num: 删除的数量 a: 需要添加的新元素 返回被删除元素数组 reverse()\n破坏性方法 反转数组 1 2 3 4 5 6 7 8 9 10 11 const arr = [\u0026#39;Tom\u0026#39;, \u0026#39;Jerry\u0026#39;, \u0026#39;Bill\u0026#39;, \u0026#39;Mike\u0026#39;]; arr.push(\u0026#39;Bob\u0026#39;); console.log(arr); // [\u0026#39;Tom\u0026#39;, \u0026#39;Jerry\u0026#39;, \u0026#39;Bill\u0026#39;, \u0026#39;Mike\u0026#39;, \u0026#39;Bob\u0026#39;] arr.pop() console.log(arr); // [\u0026#39;Tom\u0026#39;, \u0026#39;Jerry\u0026#39;, \u0026#39;Bill\u0026#39;, \u0026#39;Mike\u0026#39;] arr.unshift(\u0026#39;Cathy\u0026#39;); console.log(arr); // [\u0026#39;Cathy\u0026#39;, \u0026#39;Tom\u0026#39;, \u0026#39;Jerry\u0026#39;, \u0026#39;Bill\u0026#39;, \u0026#39;Mike\u0026#39;] arr.shift(); console.log(arr); // [\u0026#39;Tom\u0026#39;, \u0026#39;Jerry\u0026#39;, \u0026#39;Bill\u0026#39;, \u0026#39;Mike\u0026#39;] arr.splice(2,1,\u0026#39;Peter\u0026#39;, \u0026#39;Steven\u0026#39;); console.log(arr); // [\u0026#39;Tom\u0026#39;, \u0026#39;Jerry\u0026#39;, \u0026#39;Peter\u0026#39;, \u0026#39;Steven\u0026#39;, \u0026#39;Mike\u0026#39;] sort(), arr.sort() 破坏性方法 升序排序，但是是根据Unicode编码进行排序，所以如果通过sort()对数字进行排序，可能会错 可以传递一个回调函数作为参数，来指定排序规则 arr.sort((a,b) =\u0026gt; a - b)升序排列（非Unicode） arr.sort((a,b) =\u0026gt; b - a)降序排列 forEach() 遍历数组 需要回调函数作为参数来执行遍历行为 回调函数可以传递三个参数 element: 当前元素 index: 当前元素索引 array: 当前数组 1 2 3 4 5 arr = [\u0026#39;tom\u0026#39;, \u0026#39;bill\u0026#39;, \u0026#39;kevin\u0026#39;]; arr.forEach((element, index) =\u0026gt; console.log(element, index)); // tom 0 // bill 1 // kevin 2 filter() 非破坏性方法 过滤数组元素保存到新数组中返回 需要一个回调函数作为参数，会为每一个元素调用回调函数，并根据回调函数的返回值（true放，false不放）决定是否将元素添加到新数组中 回调函数的参数同forEach() 1 2 const arr = [1,2,3,4,5,6,7,8]; const arr2 = arr.filter(element =\u0026gt; element \u0026gt; 3) map() 非破坏性方法 根据当前数组生成（映射）一个新数组 需要回调函数作为参数 回调函数的返回值作为新元素 理解成原数组根据回调函数的规则映射 1 2 3 arr = [\u0026#39;Tom\u0026#39;, \u0026#39;Bill\u0026#39;, \u0026#39;Kevin\u0026#39;]; arr2 = arr.map(ele =\u0026gt; \u0026#39;\u0026lt;li\u0026gt;\u0026#39; + ele + \u0026#39;\u0026lt;/li\u0026gt;\u0026#39;); // output: [\u0026#39;\u0026lt;li\u0026gt;Tom\u0026lt;/li\u0026gt;\u0026#39;, \u0026#39;\u0026lt;li\u0026gt;Bill\u0026lt;/li\u0026gt;\u0026#39;, \u0026#39;\u0026lt;li\u0026gt;Kevin\u0026lt;/li\u0026gt;\u0026#39;] reduce() 非破坏性 对数组前两个元素按照回调函数整合，并更新 需要回调函数作为参数 返回最后整合值 可以有第三个参数，作为初始值，会先将初始值和第一个元素整合，再继续整合 1 2 3 4 5 arr = [\u0026#39;hello \u0026#39;,\u0026#39;I \u0026#39;,\u0026#39;am \u0026#39;,\u0026#39;pig \u0026#39;] res1 = arr.reduce((a,b) =\u0026gt; a + b, \u0026#39;Hi, \u0026#39;) res2 = arr.reduce((a,b) =\u0026gt; a + b) console.log(res1) // Hi, hello I am pig console.log(res2) // hello I am pig 对象的复制 - 浅拷贝和深拷贝 以数组为例\n赋值运算不是复制，会指向同样的内存\n使用slice()方法进行复制\n1 2 const arr = [\u0026#39;1\u0026#39;,\u0026#39;2\u0026#39;,\u0026#39;3\u0026#39;]; const arr2 = arr.slice(); 浅拷贝和深拷贝 浅拷贝 shallow copy 通常对象的拷贝都是浅拷贝，只对对象的浅层进行复制（只复制一层）\n浅拷贝只会对对象本身进行复制，不会复制对象中的属性（或元素）\n如果对象存储的数据是原始值，深浅拷贝不重要\n如果对象存储的元素里仍有对象，那么浅拷贝只会复制第一层（即创建新的内存储存第一层的对象）\n如果此时对第二层的元素或属性修改，会导致所有的对象都会受影响\n1 2 3 4 5 6 const arr1 = [{name:\u0026#34;Tom\u0026#34;}, {name:\u0026#39;Jerry\u0026#39;}]; const arr2 = arr1.slice(); console.log(arr1 === arr2) // false console.log(arr1[0] === arr2[0]) // true arr1[0].name = \u0026#39;Bill\u0026#39;; console.log(arr2[0].name) // Bill 深拷贝 不仅复制对象本身，还复制对象内的所有属性和元素\n一般不进行深拷贝，会导致性能开销大\nstructuredClone()方法进行深拷贝\n1 2 3 4 5 6 const arr1 = [{name:\u0026#34;Tom\u0026#34;}, {name:\u0026#39;Jerry\u0026#39;}]; const arr2 = structuredClone(arr1); console.log(arr1 === arr2) // false console.log(arr1[0] === arr2[0]) // false arr1[0].name = \u0026#39;Bill\u0026#39;; console.log(arr2[0].name) // Tom 其他复制（拷贝）方式 ...展开运算符 可以将一个数组的元素展开，可以用于函数参数传递，可以用于浅拷贝\n1 2 3 4 5 6 const arr = [1,2,3,4]; function sum(a,b,c,d){ return a+b+c+d; }; result = sum(...arr); 1 2 3 4 const arr1 = [\u0026#39;Tom\u0026#39;,\u0026#39;Jerry\u0026#39;,\u0026#39;Bill\u0026#39;]; const arr2 = [...arr1]; // 等价于手动浅拷贝 // const arr2 = [arr1[0], arr1[1],arr1[2]]; 对象的浅拷贝（复制） Object.assign(目标对象,源对象)\n可以将源对象复制/扩展/覆盖到目标对象，后来后覆盖\n1 2 const obj1 = {name:\u0026#39;tom\u0026#39;, age:18} const obj2 = Object.assign({}, obj1); ...对象同样可以用展开运算符，后来后覆盖\n1 2 const obj1 = {name:\u0026#39;tom\u0026#39;, age:18}; const obj2 = {...obj}; 内建对象 解构赋值 数组解构赋值 通过[]对数组进行结构赋值\n如果接受变量多余，则赋undefined 每次解构赋值都会覆盖上次结果，即使赋undefined 可以指定接收变量的默认值 可以通过...args接收剩余值 解构赋值可以嵌套，以接收二维数组 通过解构赋值，可以实现函数返回多个值（以数组返回，并解构接收） 解构赋值可以用来快速交换变量 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 let arr = [1,2,3]; let a,b,c,d; [a,b,c] = [1,2,3]; [a,b,c] = arr; [a,b,c,d] = arr; // d: undefined [a,b,c,d] = [5,6,7,8]; [a,b,c,d] = [1,2,3]; // d: undefined [a,b,c,d=10] = [1,2,3]; // d: 10 [a,b,c,d=d] = [1,2,3,5]; // d: 10 保留上次值 [a,b,...c] = [1,2,3,4]; // c: [3,4] function fn(){ return [1,2]; }; [a,b] = fn(); // a: 1, b:2 对象解构赋值 通过{}对对象进行解构赋值\n不同于数组解构，对象解构需要知道对象属性名，并且可以使用别名赋值给变量\n由于直接使用{}会被解释为代码块，所以直接使用{}进行解构赋值时，套上()以避免\n如果对象中没有对应属性，接收变量赋值为undefined\n其他性质同数组解构赋值\n1 2 3 4 5 6 7 8 9 const obj = {name:\u0026#39;tom\u0026#39;, age:18, gender:\u0026#39;male\u0026#39;}; // let {name, age, gender} = obj; let name, age ,gender; ({name, age,gender} = obj); let {name:a, age:b, gender:c=\u0026#39;female\u0026#39;} = obj 对象的序列化JSON JS的对象都是存在内存中\n序列化是指将对象转化为一个可以存储的格式\nJS中对象的序列化通常是转换为字符串\n对象序列化的用途：可以将字符串在不同语言之间传递\nJS对象序列化\nJSON(JavaScript Object Notation) JS对象表示法 JS对象序列化之后，转换成的字符串称为JSON字符串 JSON方法\nJSON.stringify()对象转化为JSOB字符串\nJSON.parse(str)将JSON字符串转化为对象（并且是创建新的对象）\n可以利用JSON进行对象的深拷贝\n1 2 3 4 5 6 7 8 9 10 11 12 13 const obj = { name: \u0026#39;tom\u0026#39;, age:18 }; const str = JSON.stringify(obj); console.log(obj); console.log(str); // {\u0026#34;name\u0026#34;:\u0026#34;tom\u0026#34;,\u0026#34;age\u0026#34;:18} const obj2 = JSON.parse(str); console.log(obj2); 编写JSON的注意事项\nJSON字符串有两种类型 JSON {} JSON [] JSON字符串属性名一定要用双引号 JSON中可以使用的属性值（元素）： 即其他语言也支持的类型 数字（Number） 字符串（String）且必须使用双引号 布尔值（Boolean） 空值（Null） 对象（Object） 数组（Array） JSON的格式和JS对象的格式基本上一致 注意：JSON字符串中，如果属性是最后一个，则不要加, 使用JSON进行深复制 Map Map是用来存储键值对解构的数据(key-value)\nObject中存储的数据可以认为是一种键值对结构 Map和Object的主要区别 Object的属性名只能是字符串或符号，并对其他类型强制转换为字符串 Map中，任何类型的值都可以称为数据的key 基本操作 1 2 3 4 5 6 7 8 9 10 11 12 13 14 // 创建Map const map = new Map(); // 存储key-value map.set(\u0026#39;name\u0026#39;,\u0026#39;tom\u0026#39;); map.set(a, \u0026#39;bill\u0026#39;); // 读取 map.get(\u0026#39;name\u0026#39;); map.get(a); // 删除 map.delete(\u0026#39;name\u0026#39;); // 检查 console.log(map.has(\u0026#39;name\u0026#39;)); // 清空 map.clear(); 其他操作 转换为数组\narr = Array.from(map) 转换为二维数组，其中每对key-value为一个数组 语法繁琐，不推荐 arr = [...map] 语法简单 结果同上 通过二维数组创建Map\n创建Map时向new Map()中传入二维数组 1 const map = new Map([[\u0026#34;name\u0026#34;,\u0026#34;tom\u0026#34;],[\u0026#34;age\u0026#34;,18]]); Map的遍历\n通过for (const entry of map){...}遍历，entry为key-value对数组 进一步：for(const [key, value] of map){...} forEach()同数组 获取keys和values\nmap.keys() map.values() Set 集合\n功能与数组类似，但是不能存储重复数据\n实际上是key和value相同的Map\n基本操作 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 // 创建集合 const set = new Set(); // 添加数据 set.add(10); set.add(\u0026#39;Tom\u0026#39;); // 删除 set.delete(10); // 检查 set.has(10); // 遍历 for (let item of set){ ... }; // 与数组转换 const arr = [...set]; const set2 = new Set(arr); // 数组去重 const set3 = new Set(arr); const arr2 = [...set3]; Math Math是一个工具类\n提纲了数学运算相关的常量和方法\n1 2 3 4 5 6 7 8 9 Math.PI // pi Math.E // e let x = 3; Math.abs(x); Math.sin(x); Math.max(x); Math.pow(x,3); ... Date JS中所有时间相关的数据都由Date对象来表示\n直接使用new Date()创建对象时，创建的是代码执行时的时间 可以在Date()的构造函数中，传递一个表示时间的字符串来来创建指定时间 M/D/Y Hour:Minute:Second Year-Month-DateTHour:Minute:Second 1 2 3 4 let d = new Date() // 代码执行时的时间 let d2 = new Date(\u0026#34;2019-12-23T23:34:34\u0026#34;) let d3 = new Date(2013,3,2,10,2,23,33) // 直接传入年,月,日,时,分,秒,毫秒 let d4 = new Date(20134) // 创建距离标准时间20134毫秒之后的时间 getFullYear()\n获取四位年 getMonth()\n返回月份索引（一月0） getDate()\n返回当前日期 getDay()\n返回周几 0表示周日 getTime()\n返回当前日期对象的时间戳 时间戳：自1970年1月1日0时0分0秒到当前所经历的毫秒 计算机底层存储时间都是时间戳的方式 Date.now()\n返回当前时间戳 日期的格式化 toLocaleString() 将日期和时间转换为本地字符串 参数 参数1：描述语言和地区信息的字符串，如zh-CN，en-US 参数2：配置对象，对日期进行更加详细的配置，参见Intl.DateTimeFormat() constructor - JavaScript | MDN (mozilla.org) toLocalDateString() 将日期转换为本地字符串 toLocalTimeString() 将时间转换为本地字符串 正则表达式（对象） Regular Expression\n+　通过RegExp()创建新的正则表达式对象，接收两个字符串参数\n参数1：正则表达式\n参数2：匹配模式\nreg = new RegExp(\u0026quot;a\u0026quot;,\u0026quot;i);\n可以传变量\n此方法的正则表达式中的\\会被转义 +　通过字面量来创建: /正则/匹配模式\n+　reg = /a/i +　/a/i不能是变量 +　此方法中\\不会被转义\n1 2 // 创建 let reg = new RegExp(); 正则表达式语法 在正则表达式中大部分字符都可以直接写\n| 在正则表达式中表示或\n[] 表示或（字符集）\n[a-z] 任意的小写字母 [A-Z] 任意的大写字母 [a-zA-Z] 任意的字母 [0-9]任意数字 [^] 表示除了\n[^x] 除了x . 表示除了换行外的任意字符 在正则表达式中使用\\作为转义字符 其他的字符集\n\\w 任意的单词字符，等价于[A-Za-z0-9_] _\\W 除了单词字符，等价于[^A-Za-z0-9_] \\d 任意数字 [0-9] \\D 除了数字 [^0-9] \\s 空格 \\S 除了空格 \\b 单词边界 \\B 除了单词边界 开头和结尾\n^ 表示字符串的开头 $ 表示字符串的结尾 量词\n{m} 正好m个，let reg = /a3/等价于let reg = /aaa/ {m,} 至少m个 {m,n} m到n个 a+一个以上的a，相当于a{1,} a*任意数量的a a? 0-1次，最多有一个a，等价于a{0,1} 通过正则表达式检查字符串是否符合规则 +　reg.test(str)\n获取字符串中符合正则表达式的内容\nreg.exec(str) 每调用一次只匹配一次 可以用()对正则表达式进行分组 通过遍历可以匹配所有 1 2 3 4 5 6 7 8 9 10 let reg = /a[a-z]c/ig; // i表示忽略大小写，g表示全局匹配 let str = \u0026#34;abcadfadfadfc\u0026#34;; res1 = reg.test(str); res2 = reg.exec(str); console.log(res1); console.log(res2); while(res2){ console.log(res2); res2 = reg.exec(str); }; 字符串的正则方法 split() 可以根据正则表达来对字符串进行拆分 传入正则表达式 返回数组 search() 搜索符合正则表达式的内容第一次出现的索引 replace() 根据正则表达式替换符合的内容 正则表达式加/g以替换所有 match() 根据正则表达式匹配符合的内容 正则表达式加/g以匹配所有 返回符合的字符串 不支持分组 matchAll() 匹配所有 必须加/g 返回迭代器，需要遍历取出结果 ","date":"2023-12-06T22:57:11+08:00","image":"https://oddyti.com/post/js-study/JS_hu10154213548559746074.png","permalink":"https://oddyti.com/post/js-study/","title":"JavaScript学习记录"},{"content":" 浏览器 - Edge\nWin11自带。\nOffice全家桶\n无须解释。\nQQ\n无须解释。\n微信\n无须解释。\n卸载软件 - Geek Uninstaller - the best FREE uninstaller\n免费，一个非常小巧的卸载软件的软件，可以扫描到系统中几乎所有安装的软件，以及卸载后扫描清理注册表功能。\n视频播放 - Potplayer\n免费，功能强大的播放器。建议换一个皮肤，默认皮肤太丑了。\n写作 - Typora\n收费，好用的Markdown编辑器。搭配自己根据Drake修改的皮肤。\n工作 - GitHub Desktop\n免费，Github仓库管理及Git管理，自从用了它，再也没有手敲过git指令。\n娱乐 - 网易云音乐\n免费，听歌。\n工作 - Zotero\n免费，论文管理+阅读，支持翻译插件（推荐zotero-pdf-translate），云同步（搭配坚果云使用）。\n工作 - Visual Studio Code\n免费，最好用的编辑器。\n压缩 - Bandizip\n免费，解压缩软件，轻量。\n图像查看 - Honeyview\n免费，界面丑，但是好用，支持自定义鼠标和键盘操作。（如滚轮缩放）\n工作 - Anaconda\n免费，Python虚拟环境、包管理。装好记得配置系统环境变量。\n工作 - MATLAB\n收费，无须解释。\n工作 - PowerShell 7\n免费，建议升级自带的Powershell 5到Powershell 7。配置PSReadLine插件实现补全。不建议Oh My Posh美化，加载配置文件太慢。\n工作 - Git\n免费，无须解释。\n截图 - Snipaste\n小巧好用的截图软件。\n系统 - EarTrumpet\n可以分软件调整音量的轻量软件。\n系统 - Capslock+\n免费，赋予Capslock类似于Shift一样的功能，可以组合不同的快捷键。\n","date":"2023-10-31T22:40:13+08:00","permalink":"https://oddyti.com/post/apps-share/","title":"Windows软件分享/新系统配置清单"},{"content":"问题 最优化理论与算法课程作业题，用遗传算法求解如下问题： $$ max \\quad f(x) = x \\cdot sin(3x) , -1 \\le x \\le 30 $$\n算法思路 退火算法具体思路可以理解为晚上喝醉后爬山，目标是到山顶。由于是晚上，所以这个人只能看见附近一定距离的山的情况。刚开始是醉的，所以这个人迷迷糊糊随机爬，可能按正确的方向向上爬，也可能向下爬，但是随着醉酒程度慢慢减轻，这个人慢慢看清了附近的形势，于是向上爬。最后达到山顶。\n而模拟退火算法来源于固体退火原理，是一种基于概率的算法，将固体加温至充分高，再让其徐徐冷却，温度高时，固体内部粒子无序，内能大，而徐徐冷却时粒子渐趋有序，在每个温度都达到平衡态，最后在常温时达到基态，内能减为最小。\n冷却初期的高温对应了醉酒爬山初期醉酒情况，这时候无序，按一定的概率接受向下的方向。后期温度降低对应酒醒，这时候接受错误方向的概率非常低。\n退火算法的好处是按照一定概率接受错误方向，可以跳出局部最优解，并且随着进度慢慢降低接受错误方向的概率。\n流程图直接放一张PPT的流程图：\n初始化 选取区间任意解，设定足够高的初始温度。\n产生领域解 在初始解（上一解）附近随机产生一个领域解，即随机找一个方向爬山。\n领域解接受判断 如果领域解的方向是正确方向（此题即函数值更大），则接受领域解。如果是错误方向，则按照一定概率接受，接收概率与当前温度相关。\n判断 若内循环次数大于预设次数，认为这个温度下爬山已经爬够了，降温。否则继续爬。\n降温 按照比例或者增量降温，如果温度达到低温条件，则停止。否则降温后继续爬山。\nMatlab实现 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 clear; clc; close all; % 目标函数 func = @(x) x * sin(3 * x); x0 = 10; % 初始解 T0 = 1e4; % 初始温度 Tf = 1e-4; % 终止温度 r = 0.97; % 降温指数 epochs = 1e3;\t% 迭代次数 Tk = T0; xk = x0; while true for i = 1:epochs x_new = xk + rand(1); if x_new \u0026gt; 30 x_new = 30 - rand(1); end if x_new \u0026lt; -1 x_new = -1 + rand(1); end delta_f = func(x_new) - func(xk); if delta_f \u0026gt; 0 xk = x_new; else esp = rand(); if exp(delta_f ./ Tk) \u0026gt; esp xk = x_new; end end end Tk = Tk * r; if Tk \u0026lt; Tf best_x = xk; best_f = func(xk); break; end end 结果 1 最优解 x = 29.849416， 目标函数值 f = 29.846949 ","date":"2023-10-30T14:44:26+08:00","permalink":"https://oddyti.com/post/simulated-annealing/","title":"最优化理论算法：模拟退火算法寻找函数最值Matlab实现"},{"content":"问题 最优化理论与算法课程作业题，用遗传算法求解如下问题： $$ max \\quad f(x) = x \\cdot sin(3x) , -1 \\le x \\le 30 $$\n算法思路 算法基本流程资料已经很多了，这里贴一个课程PPT里的图：\n编码 将问题的解用一种码表示，常用二进制编码。\n此题中解即为x的值，考虑6位小数精度，将区间$[-1,30]$调整位$[0,31\\cdot 10^{6}]$，得到二进制码码长为25，即基因长度。\n基因编码和实际解转换如下： $$ x = lower+x_{dec}\\cdot \\frac{upper\\ - lower}{2^{genelength}-1} \\\\ x_{dec} = bin2dec(x_{bin}) $$\n产生初始种群 确定好了编码类型和长度之后，产生初始种群，选择合适的种群大小。\n1 2 % 初始化种群 populations = randi([0, 1], population_size, gene_length); 计算适应度 遗传算法中以种群中个体的适应度来作为选择的依据。本题中适应度由目标函数变换而成。 $$ fitness(x) = f(x) $$ 适应度计算函数：cal_fitness()\n1 2 3 4 5 6 7 8 9 10 % 计算适应度函数 function fitness = cal_fitness(func, populations, upper_limit, lower_limit) [population_size, gene_length] = size(populations); populations_x = bin2dec(num2str(populations)); x = lower_limit + populations_x * (upper_limit - lower_limit) / (2 ^ gene_length - 1); fitness = zeros(population_size, 1); for i = 1:population_size fitness(i) = func(x(i)); end end 选择 得到种群中个体的适应度后，便可以根据适应度进行选择。常用的选择方法为：比例选择。其基本思想：每个个体被选中的概率与其适应度值成正比，设种群规模为$M$，个体$i$的适应度值为$f_i$，则个体$i$被选中的概率$P_i$为: $$ P_i = \\frac{f_i}{\\sum_{i = 1}^{M}f_i} $$ 确定好选中概率后，采用轮盘赌的方式来选择出个体。轮盘赌次数为个体数量。\n轮盘赌选择函数：select_population()\n1 2 3 4 5 6 7 8 9 10 % 计算适应度函数 function fitness = cal_fitness(func, populations, upper_limit, lower_limit) [population_size, gene_length] = size(populations); populations_x = bin2dec(num2str(populations)); x = lower_limit + populations_x * (upper_limit - lower_limit) / (2 ^ gene_length - 1); fitness = zeros(population_size, 1); for i = 1:population_size fitness(i) = func(x(i)); end end 交叉 选择出个体后，根据交叉概率，对个体进行两两交叉操作，对于二进制编码，常用交叉的方法是单点交叉。交叉概率用以决定当前一对个体是否进行交叉，不宜太大，否则个体更新过快，高适应度的个体容易被破坏，不宜太小，否则算法容易停滞。\n交叉函数：cross_population()\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 % 交叉 function new_populations = cross_population(populations, cross_prob) [population_size, gene_length] = size(populations); new_populations = populations; for i = 1:2:population_size prob = rand; % 用于判决是否进行交叉 if prob \u0026lt;= cross_prob cross_index = randi([1, gene_length]); temp = new_populations(i, :); temp(:, cross_index:end) = new_populations(i + 1, cross_index:end); new_populations(i + 1, cross_index:end) = new_populations(i, cross_index:end); new_populations(i, :) = temp; end end end 变异 交叉完成后，根据变异概率对个体进行变异操作，具体是指对变异的个体随机选择某一位进行反转操作。并非所有被选择的个体，都要进行变异操作。变异概率太小很难产生新个体，太大会使GA成为随机搜索。\n变异函数：mutate_population()\n1 2 3 4 5 6 7 8 9 10 11 12 % 变异函数 function new_populations = mutate_population(populations, mutation_prob) [population_size, gene_length] = size(populations); new_populations = populations; for i = 1:population_size prob = rand; % 决定是否变异 if prob \u0026lt;= mutation_prob mutation_index = randi([1, gene_length]); new_populations(i, mutation_index) = ~new_populations(i, mutation_index); end end end 算法终止判断 常用预先设定迭代（进化）次数作为终止条件。其次以最优值是否连续若干步没有明显变化作为终止条件。\n主函数 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 clear; clc; close all; % 目标函数 func = @(x) x * sin(3 * x); % 全局参数 population_size = 100; % 种群数量 gene_length = 25; % 基因长度，精度定为6位小数 cross_prob = 0.20; % 交叉概率 mutation_prob = 0.01; % 变异概率 max_epochs = 1000; % 最大迭代次数 upper_limit = 30; % 上限 lower_limit = -1; % 下限 best_x_bin = []; % 最优解 best_f = -Inf; % 最优解适应度 % 初始化种群 populations = randi([0, 1], population_size, gene_length); % 迭代主函数 for epoch = 1:max_epochs % 计算适应度 fitness = cal_fitness(func, populations, upper_limit, lower_limit); % 选择 轮盘赌 populations_selected = select_population(populations, fitness); % 交叉 populations_crossed = cross_population(populations_selected, cross_prob); % 变异 populations_mutated = mutate_population(populations_crossed, mutation_prob); % 更新种群 populations = populations_mutated; % 更新最优解 fitness = cal_fitness(func, populations, upper_limit, lower_limit); [max_fitness, max_index] = max(fitness); if max_fitness \u0026gt; best_f best_x_bin = populations(max_index, :); best_x = bin2dec(num2str(best_x_bin)); best_x = lower_limit + best_x * (upper_limit - lower_limit) / (2 ^ gene_length - 1); best_f = max_fitness; end end 结果 1 最优解 x = 29.840208， 目标函数值 f = 29.836955 ","date":"2023-10-30T14:43:47+08:00","permalink":"https://oddyti.com/post/genetic-algorithm/","title":"最优化理论算法：遗传算法寻找函数最值Matlab实现"},{"content":"问题 最优化理论与算法课程上留了一道作业题，用启发式搜索算法求解数独问题。数独如下。\n算法思路 基础算法上采用深度优先搜索，即找到一个空位就填入一个符合数独要求的数字，即候选数，然后扩展该节点，继续找下一个空位填入一个候选数，扩展节点。如果发现有空位没有候选数可以填，就回溯。直到所有的空位都填满数字。\n在此基础上，考虑启发式搜索，即寻找空位时候，先求出所有空位的候选数的数量，然后找到候选数数量最少的空位作为扩展的节点。可以减少搜索次数。\n算法流程图如下：\nMatlab实现 用matlab实现该算法，其中结构体数组poplist为open表储存了扩展的节点。candidate为当前节点情况下的最少候选数空位的候选数，index为节点索引。\n代码结构：\n主函数： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 clear; clc; close all; % 数独矩阵 board = [ 0 0 0 7 0 2 0 0 0; 1 0 0 0 4 0 0 0 7; 6 5 0 0 0 0 0 9 4; 4 7 0 8 0 1 0 6 2; 0 0 0 0 0 0 0 0 0; 5 8 0 2 0 9 0 1 3; 8 6 0 0 0 0 0 7 5; 9 0 0 0 6 0 0 0 8; 0 0 0 9 0 8 0 0 0; ]; % 主函数 poplist = struct(); % 储存待扩展节点的open表 i = 1; % poplist迭代索引 isok = false; % 结束flag epoch = 1; % 迭代变量 [poplist(i).candidate, poplist(i).index, isok] = cal_candidate(board); while true if isok disp(epoch); break; else % 判断poplist最后一个节点是否为空 if isempty(poplist(end).candidate) % 该位置的候选数空，说明坏节点，还原为该位置为0，回溯 index = poplist(end).index; board(index(1), index(2)) = 0; poplist(end) = []; i = i - 1; else % 该位置候选数不为空，赋值，更新poplist，扩展节点 index = poplist(end).index; board(index(1), index(2)) = poplist(end).candidate(1); poplist(end).candidate(1) = []; i = i + 1; [poplist(i).candidate, poplist(i).index, isok] = cal_candidate(board); end end epoch = epoch + 1; end 候选数计算函数：cal_candidate() 函数统计所有空位候选数的函数，返回候选数最少的空位坐标及其候选数\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 % 函数：计算所有0处的候选数，并返回最少候选数的空位坐标及候选数list function [cand_list, cand_index, isok] = cal_candidate(board) k = 1; candidate = struct(); empty = false; % board是否还有空位flag，默认没有空位 for i = 1:9 for j = 1:9 if board(i, j) == 0 empty = true; % 能找到0, 说明board还有空位 candidate(k).list = find_candidate(board, i, j); candidate(k).length = length(candidate(k).list); candidate(k).index = [i, j]; k = k + 1; end end end if empty % 将空位按照候选数数量升序 [~, index] = sort([candidate.length]); candidate = candidate(index); cand_list = candidate.list; cand_index = candidate.index; isok = false; else cand_list = []; cand_index = []; isok = true; end end 寻找候选数函数：find_candidate() 寻找当前空位所有的候选数list\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 % 寻找当前位置候选数list function list = find_candidate(board, x, y) numbers = [1 2 3 4 5 6 7 8 9]; for i = 1:9 % 扫描行 if board(x, i) ~= 0 numbers(numbers == board(x, i)) = []; % 如果发现非0数，则将numbers中该数删除 end % 扫描列 if board(i, y) ~= 0 numbers(numbers == board(i, y)) = []; % 如果发现非0数，则将numbers中该数删除 end end % 扫描九宫格 start_i = ceil(x / 3) - 1; start_j = ceil(y / 3) - 1; for i = 1:3 for j = 1:3 if board(i + start_i * 3, j + start_j * 3) ~= 0 numbers(numbers == board(i + start_i * 3, j + start_j * 3)) = []; % 如果发现非0数，则将numbers中该数删除 end end end list = numbers; end 结果 作业中数独问题比较简单，迭代52次，不需要回溯，结果如下：\n后测试了难度更大的数独问题。\n共迭代1439次，结果如下：\n参考 启发式搜索算法求解数独 ","date":"2023-10-30T13:52:38+08:00","permalink":"https://oddyti.com/post/heuristically-search/","title":"最优化理论算法：用启发式搜索求解数独问题Matlab实现"},{"content":"Github仓库双分支分别存放源代码和部署后的代码 最开始我是按照网上的教程将Hugo源代码仓库存放在Github仓库中，并且通过Github Action实现了自动部署。但是便出现了问题，每次我本地提交代码到Github后，Github便会运行设置好的Action指令，在Github进行Hugo部署，便会产生生成好的网页代码文件。\n但是带来两个问题，一是部署产生的网页代码文件和源代码文件是不同的，这样便会覆盖掉源代码文件；二是本地如果更新源代码文件后，提交时便会发现本地和Github分支冲突，这时候只能强制push，操作繁琐。\n解决思路是在Github仓库新建一个分支，我命令为deploy，主分支为master，然后将源代码文件存放在master分支，部署产生的文件存放在deploy分支。便可以解决上述问题。\n具体需要修改两个地方。\n修改自动部署指令，将部署分支PUBLISH_BRANCH值修改为deploy\n1 2 3 4 5 6 7 8 - name: Deploy to GitHub Pages uses: peaceiris/actions-gh-pages@v3 with: PERSONAL_TOKEN: ${{ secrets.DEPLOY_TOKEN}} EXTERNAL_REPOSITORY: name/name.github.io PUBLISH_BRANCH: deploy PUBLISH_DIR: ./ commit_message: ${{ github.event.head_commit.message }} 修改Github Pages设置，将Build and deployment的分支修改为deploy分支。\nGithub Action实现自动化部署后域名绑定丢失 每次Push，Github Action自动部署之后，之前在Github Pages设置中绑定的域名便会被清空。 解决方法，在自动部署文件deploy.yml部署job中添加域名信息。\n1 2 3 4 5 6 7 8 9 - name: Deploy to GitHub Pages uses: peaceiris/actions-gh-pages@v3 with: PERSONAL_TOKEN: ${{ secrets.DEPLOY_TOKEN}} EXTERNAL_REPOSITORY: name/name.github.io PUBLISH_BRANCH: deploy PUBLISH_DIR: ./ commit_message: ${{ github.event.head_commit.message }} cname: www.oddyti.com # 你的域名 Stack主题启用Local Search Stack主题自带Local Search功能，但是启用该功能需要在创建content/search/index.md\n内容如下：\n1 2 3 4 5 6 +++ title = \u0026#34;Search\u0026#34; slug = \u0026#34;search\u0026#34; layout = \u0026#34;search\u0026#34; outputs = [ \u0026#34;html\u0026#34;, \u0026#34;json\u0026#34; ] +++ 文章本地能够加载图片，Github部署后图片无法加载 文章内插入图片，需要严格按照Stack文档-Markdown图片插入，文件目录为：\n1 2 3 4 5 6 7 content └── gallery └── my-first-gallery ├── index.md ├── image1.png ├── image2.png └── image3.png 文章Markdown内容为：\n1 2 3 --- content/gallery/my-first-gallery/index.md --- ![Image 1](image1.png) ![Image 2](image2.png) ![Image 3](image3.png) 以下为我的错误展示：\n1 2 3 4 5 6 7 8 content └── gallery └── my-first-gallery └── index.md └── assets ├── image1.png ├── image2.png └── image3.png 这样会导致Github部署后无法加载图片。\n","date":"2023-10-29T15:46:19+08:00","image":"https://oddyti.com/post/hugo-problems/cover_hu3050862892986091059.jpg","permalink":"https://oddyti.com/post/hugo-problems/","title":"Hugo（Stack主题）博客搭建过程中踩过的坑"},{"content":"黑魂萌新，已经被米狄尔虐傻了，随义哥哥视频也看了，米狄尔的出招视频也看了，前前后后自己没有捏余火（舍不得）尝试了十多二十次吧，也找过下血本（捏余火）召过几次好哥哥，都失败了。最后一次召准备捏余火召好哥哥没想到被入侵了，还好机智如我马上嫩白树枝捉迷藏等到警察好哥哥来打败了入侵，于是便来到了视频开头\n最后没想到这个看起来非常靠谱的好哥哥早早就离开了，也没想到这次竟然自己能够过掉米狄尔\n","date":"2023-08-15T23:46:23+08:00","image":"https://oddyti.com/post/game-ds3/ds3_hu10334303450194563953.jpg","permalink":"https://oddyti.com/post/game-ds3/","title":"黑暗之魂3击败米宝记录"},{"content":"这是一期个人向的歌曲推荐视频（希望能有第二期\n自己现在饱受歌荒困扰，但是自己的歌单这些年里也囤了许多歌，于是便想精选出一些歌曲，希望能抛砖引玉，找到同好，拯救自己歌荒，也希望能帮助到他人的歌荒。\n每期一共十首音乐，包含的风格很多，由于时长原因，每一首会剪出一到两部分片段，但是如果喜欢的话，仍然推荐去听整曲，甚至整张专辑。\n","date":"2023-03-23T10:19:58+08:00","permalink":"https://oddyti.com/post/music-share-01/","title":"歌荒拯救计划 | 个人向推歌 - 第一期"},{"content":"隐入尘烟 在电影院门前看到了这个电影的海报，觉得很有感觉，又看到海报上写着入围了第72届柏林国际电影节，觉得应该不错。于是便记住了这个电影。于是在养伤期间下载看了。\n电影看下来是很喜欢的。在看电影之前我也看到有一些评论说，电影丑化了中国的农村。可是在我看来电影里的农村环境，生活环境都是很真实的。虽然自己的故乡不在西北，也没有真正的去过。但是电影里呈现出来农村的环境，人面对自然面对于土地面对生活的方式，会让我非常的熟悉。\n整个电影看下来最打动我的两个点。一个是马有铁在面对生活中如此多的困苦时的那种乐观。这种乐观也可以说是在许许多多中国底层人民看到的，包括在自己家乡，在父辈身上看到的乐观。那种面对困苦时，并不会自怨自艾，会默默的寻找出属于自己的一条出路。就像在生活刚走上正轨，却因为村里要拆迁掉空闲的房子，当我还在担心来之不易的生活要遭受打击时，马有铁开始了一个人的建房。\n第二个点是马有铁和曹贵英的爱情。困境下的爱情总是会让人更加容易感动。并且在粗犷的西北黄土地里，他俩的爱情却有着一种感人的细腻和含蓄。同时也带着一种和土地一样的质朴。\n从我来自农村的经历来看，电影里让我觉得唯一让我觉得有点不太合理的是村里的关系，电影里几乎大部分的村民对马有铁夫妇的态度都是很冷漠的。尤其是河边那一堆闲谈的邻里。这样的关系在我经历过的农村，都是难以看到的。小时候从父母和周围邻居感受到的是，穷和苦难不会被人看不起，但是如果一个人不忠不孝还不知上进，这样的才会被看不起。更何况电影里马有铁虽然不富裕，但是上进，善良，而且很有自己的原则。而曹贵英也是同样的善良。而这样的人受到的确实邻里的冷漠，这一点是我觉得整个电影的质朴和真实之下不合理的地方。\n看电影时，我总害怕这个电影会像活着一样，会充满着许多不可意料的意外和苦难，以至于我在观影的时候，总会在马有铁夫妇生活开始向好的时候担心会发生的意外。比如在他俩种植麦子的时候我总会担心天灾会让他们的麦子颗粒无收。比如多次的抽血会让马有铁倒下。但是慢慢看下来，发现并没有出现类似的情节。电影里对马有铁对土地的几次台词，都会触动我。在面临生活的苦难，尤其面对邻里甚至亲人的冷漠时，而土地不会骗人，这也是看到秋天让我很放心的一个点。“啥不是土里头生的，啥不是土里头长的，土都不嫌弃我们，我们还嫌弃土吗？土就是干净的东西嘛，不管你是有钱有势的人，还是啥人， 你只有种上一袋袋麦子，它就能给你长出十几袋子，二十几袋麦子来嚒。”\n","date":"2022-09-15T14:20:41+08:00","permalink":"https://oddyti.com/post/return-to-dust/","title":"《隐入尘烟》观后感"},{"content":"大佛普拉斯 最开始知道这个电影，是因为当初在学习口琴的时候，看到了学的谱子里有一首曲子叫面会菜，很好听。后来去找了原曲，原曲是吉他、口哨、钢琴演奏的。初听这首曲子的时候，总感觉是一种很悠闲治愈的感觉，就像是在城市喧嚣里呆久了，回到乡下，行走在稻田两边春风拂面的感觉。\n当时也对这个歌名——面会菜很疑惑，想着面会菜是什么东西，然后去搜了搜，发现这首歌出自台湾电影——大佛普拉斯。\n那段时间刚好看到叙利亚巴米扬大佛被炸的事情，于是以为这个大佛普拉斯是一个讲述国外的宗教文化的纪录片。于是便没有去深入的了解。\n最近看了许多视频，又听到了这首bgm，很好听，于是又把这首歌放回了歌单，反反复复的听着。也是一首没有看评论，只是单纯的去听。终于在膝盖受伤寝室养伤这一天，想起来这首歌背后的电影，当时还记得这个电影获得过什么金像奖，想着应该不会差。于是便去下载下来看了。\n直到电影快结束的时候，这首熟悉的插曲才响起来，不过这时候再听这首曲子，虽然同样能获得放松悠闲的感觉，但是这样的感觉缺加上了一种无力的解脱。\n电影中这段音乐响起是肚财去吃面会菜的时候，也是他吃的最后一次饭，现在看完电影再去听歌的时候，才发现了这个曲子的英文其实就叫The Last Meal。电影在这里，面会菜的阿姨给了肚财加了个鸡腿，仿佛命中知道这是肚财的最后一餐似的。然后就是在这首曲子渐渐明朗的时候，镜头从一望无际的稻田移到了肚财出事的地点。没有拍肚财怎么出的车祸，只是慢慢移动拍着车祸后的一地狼藉，甚至连肚财也是被白布盖着，没有拍出来。音乐的舒缓，镜头的舒缓，画面的安静的背后，却是平日中透明的一个小人物的逝去。\n电影看下来，故事其实并不是一个跌宕起伏的故事，讲述的其实只是两个小人物生活中的微不足道寻常，但是又时不时的夹杂着一些意外。靠捡垃圾收破烂为生独自生活的肚财，晚上给佛像工厂看门，并偶尔在送葬乐队里打鼓的菜埔。俩人在晚上值班偷看佛像工厂老板的行车记录仪时，无意间发现了老板杀害了情妇的事情。最后肚财因为喝酒骑车摔死而结束，没人知道肚财真正的死因，因为他从来不喝酒，也没钱买酒喝到烂醉的程度。\n这两个底层人物的生活虽然是令人心酸的，但是也有着自己的生活和快乐。肚财喜欢在便利店门口抓娃娃，影片最后菜埔第一次去肚财的家，发现肚财睡的地方是一个帐篷，里面整齐的摆满了肚财这些年抓的娃娃。\n肚财的结局是令人心酸的，但是他的生活也充满着许多自己的快乐和乐趣。而电影的最后也是心酸的，但是导演对于电影的和叙事的处理却有着许多有趣和幽默。看完整部电影仿佛是一盘炒好的苦瓜，焯过水，放了盐，放了提香的姜蒜，入口会没那么苦，而且想着苦瓜可以清热解火，你也会吃的很心甘。但是细细咀嚼，终究会感受到苦味。\n电影有很多有趣或者是特别的地方。\n首先电影是黑白的，电影只有在菜埔和肚财看老板的行车记录仪的时候，才是彩色的。对于看惯了彩色电影的我们来说，再看黑白电影的时候，会感受到一种新鲜感和疏离感。没有了色彩，只有光和影，整个电影看起来并没有那么强烈的情感冲击，但是电影带来的情感却慢慢的，悄悄的在心底生长着。\n其次导演会在电影必要时刻加上自己的旁白解释，这也是和许多电影不一样的地方，仿佛这是一个纪录片一样，有着旁白，比如导演在影片开始的时候就加入了这样的旁白，“我是始终如一的导演——啊尧，在电影的放映过程当中，我会三不五时，出来讲几句话，宣传一下个人的理念，顺便解释剧情，请大家慢慢看，就先不打扰，需要的时候，我会再出来。”而且导演的旁白有着一种讽刺现实的幽默感。\n看完这个电影，会觉得每个人无论是上层还是底层，就算是流浪汉，也会有着自己的一片天地和自己的生活。会有着自己的精神世界。\n","date":"2022-09-13T20:37:52+08:00","permalink":"https://oddyti.com/post/buddha-/","title":"《大佛普拉斯》观后感"},{"content":"001 Song F - 达达 日推到了达达乐队的Song F，其实之前看乐队的夏天的时候有听过这首歌的，但是那时候无感，考试周被推到，就突然喜欢了起来。 给我的感觉就是很干净、很清澈。 单单是歌词描述的画面就让我感觉很干净、很温柔。\nSong F - 达达乐队\n词：彭坦\n曲：彭坦\n在那些黎明将至的山谷里\n我急促的 甚至奔跑起来\n生命穿越过苏醒的花丛\n让我带走这里躁动的希望\n在那些炙热潮湿的喧嚣里\n我急促的 甚至奔跑起来\n汗水渗透着城市的睡梦\n让我带走这里火红的舞蹈\n在那些插着稻草人的田野里\n我急促的 甚至奔跑起来\n风吹拂金黄颜色的大地\n让我带走这里成熟的消息\n在那些雪花绽放的日子里\n我急促的 甚至奔跑起来\n冰雪的花粉在脸上融化\n让我带走这里所有的回忆\n谁能够明白 爱又是什么\n谁能告诉我 我该去哪里\n在那些雪花绽放的日子里\n我急促的 甚至奔跑起来\n冰雪的花粉在脸上融化\n让我带走这里所有的回忆\n在那些插着稻草人的田野里\n我急促的 甚至奔跑起来\n风吹拂金黄颜色的大地\n让我带走这里成熟的消息\n在那些炙热潮湿的喧嚣里\n我急促的 甚至奔跑起来\n汗水渗透着城市的睡梦\n让我带走这里火红的舞蹈\n在那些黎明将至的山谷里\n我急促的 甚至奔跑起来\n生命穿越过苏醒的花丛\n让我带走这里躁动的希望\n你告诉我爱就是森林\n我向森林奔去\n你告诉我爱就是海湾\n我向海湾骑行\n你告诉我爱就是云朵\n我向云朵飞翔\n你告诉我爱就在你的心中\n我轻轻吻你\n让我带走这里躁动的希望\n让我带走这里火红的舞蹈\n让我带走这里成熟的消息\n让我带走这里所有的回忆\n002 Sign of the Times - Harry Styles 第一次听到这首是在高中的时候，之前听过一些单向的歌，后来就很少听了，再看到则是听说Harry Styles单飞了。\n说回这首歌，听这首歌的时候，整个情绪是完全被这首歌带着走的， 尤其是第一句Just stop your crying, it’s a sign of the times，然后慢慢铺垫，到4分钟左右的时候整个铺垫的情绪完全荡开，之前铺垫的那种焦虑迷茫也像MV里那样随之飞走。\n看网上说这首歌原本是为电影《敦刻尔克》写的（也就是Harry参演的那个），所以歌词很多地方可以看出是描述的战争有关的。但是也可以理解为一种象征。\n高中看《遗落的南境》，刚好在循环这首歌，导致我不由自主的把小说里那种紧张、神秘和最后的激动联系到一起了。所以在此也安利下这本获得星云奖的书。\nJust stop your crying\nIt\u0026rsquo;s a sign of the times\nWelcome to the final show\nHope you\u0026rsquo;re wearing your best clothes\nYou can\u0026rsquo;t bribe the door on your way to the sky\nYou look pretty good down here\nBut you ain\u0026rsquo;t really good\nWe never learn, we\u0026rsquo;ve been here before\nWhy are we always stuck and running from\nThe bullets\nThe bullets\nWe never learn, we\u0026rsquo;ve been here before\nWhy are we always stuck and running from\nThe bullets\nThe bullets\nJust stop your crying\nIt\u0026rsquo;s a sign of the times\nWe gotta get away from here\nWe gotta get away from here\nJust stop your crying\nIt will be alright\nThey told me that the end is near\nWe gotta get away from here\nJust stop crying\nHave the time of your life\nBreaking through the atmosphere\nAnd things are pretty good from here\nRemember everything will be alright\nWe can meet again somewhere\nSomewhere far away from here\nWe never learn, we\u0026rsquo;ve been here before\nWhy are we always stuck and running from\nThe bullets\nThe bullets\nWe never learn, we\u0026rsquo;ve been here before\nWhy are we always stuck and running from\nThe bullets\nThe bullets\nJust stop your crying\nIt\u0026rsquo;s a sign of the times\nWe gotta get away from here\nWe gotta get away from here\nJust stop your crying\nBaby it will be alright\nThey told me that the end is near\nWe gotta get away from here\nWe never learn, we\u0026rsquo;ve been here before\nWhy are we always stuck and running from\nThe bullets\nThe bullets\nWe never learn, we\u0026rsquo;ve been here before\nWhy are we always stuck and running from\nThe bullets\nThe bullets\nWe don\u0026rsquo;t talk enough\nWe should open up\nBefore it\u0026rsquo;s all too much\nWill we ever learn\nWe\u0026rsquo;ve been here before\nIt\u0026rsquo;s just what we know\nStop your crying baby\nIt\u0026rsquo;s a sign of the times\nWe gotta get away\nWe got to get away\nWe got to get away\nWe got to get away\nWe got to get away\nWe got to, we got to\nWe got to, we got to\nWe got to, we got to\n003 杀死那个石家庄人 - 万能青年旅店 第一次听到是在看中国摇滚的现场集锦，那段时间迷上了国摇，从早期的崔健、黑豹、唐朝到慢慢后面的窦唯、张楚，再到后面的花儿、新裤子、刺猬、二手……\n然后就看了许多现场集锦，这首歌的出现瞬间吸引住了我，它的歌词和它的歌名一样，狠狠地抓住你，让你想要弄清它背后的故事。并不复杂的编曲和旋律，却讲述着一段平静却撕心裂肺的往事。高潮部分的小号是我最爱的一部分，总感觉小号有一种魔力可以很容易地抓住情绪。尤其是用在摇滚里，之前看乐夏时九连真人也是。下期分享以下我很喜欢的一个小号曲。\n万青这张专辑的其他歌也非常的好，也安利下。\n这首歌具体的故事可以参考下这个评论：\n“这首歌是纪念一个时代的，没有体会的人是不懂的，过去石家庄药厂很多，普遍是国企，这些普通工人没什么追求，基本就是干一辈子到退休，然后时代变了，国企没了光环，企业改制变私企，铁饭碗换来下岗，人生的意义开始变得虚无，所以歌名叫做杀死那个石家庄人，大厦崩塌了，人还得活着，但何去何却从没有”\n作词 : 姬赓\n作曲 : 董亚千\n傍晚6点下班 换掉药厂的衣裳\n妻子在熬粥 我去喝几瓶啤酒\n如此生活30年 直到大厦崩塌\n云层深处的黑暗啊 淹没心底的景观\n在八角柜台 疯狂的人民商场\n用一张假钞 买一把假枪\n保卫她的生活 直到大厦崩塌\n夜幕覆盖华北平原 忧伤浸透她的脸\n河北师大附中 乒乓少年背向我\n沉默的注视 无法离开的教室\n生活在经验里 直到大厦崩塌\n一万匹脱缰的马 在他脑海中奔跑\n如此生活30年 直到大厦崩塌\n一万匹脱缰的马 在他脑海中奔跑\n如此生活30年 直到大厦崩塌\n云层深处的黑暗啊 淹没心底的景观\n004 Emmanuel - Chris Botti 小号与小提琴的深情对话。\n第一次听这首曲子很早了，应该是初中偶然间听到的。初听时就被这首曲子的凄美和深情打动了。\n整首曲子停下来仿佛是在听小号和小提琴互相倾诉，从一开始的娓娓道来，到后面情感逐渐上升。\n也是这首曲子，让我喜欢上了小号。那时的我突然发现，小号也可以娓娓道来，如泣如诉。这首歌曾经也长期是我网易云听歌排行榜的第一（直到后来有一天我电脑放着歌单曲循环没有关，再后来也有了新的第一也就是上一期的——杀死那个石家庄人）\n这首曲子并非Chris Botti 创作，原曲出自1970年专辑wings, 作曲者Michel Colombier，相较于原曲，Chris Botti的版本更加动人。\nPS：Chris Botti还挺帅233333\n005 Don\u0026rsquo;t Cry - Guns N\u0026rsquo; Roses 这首歌应该是我的正真听英文歌曲的启蒙曲之一。小时候最开始能听到歌的地方就是我姐姐的手机，所以听歌的品味也受我姐的影响。到了小学四五年级的时候，家里有电脑可以上网了，lz就慢慢开始拓展自己听的歌了。那时候总觉得听英文歌很牛，于是乎我就在百度敲下了“有哪些好听的英文歌”，点进去了一个贴吧的帖子，开始的几首歌于是乎就成了我的英文歌曲的启蒙曲。\n我至今还记得的几首是：Don\u0026rsquo;t Cry - Guns N\u0026rsquo; Roses，Lemon Tree - Fool\u0026rsquo;s Garden, Take Me to Your Heart - Michael Learns To Rock。\n而枪花的（Guns N\u0026rsquo; Roses）的东快（Don\u0026rsquo;t Cry）变成了我摇滚乐的启蒙。这首歌其实算作一首比较有力量的情歌（Power Balled），主唱Axxxxl（至于为什么称他为Axxxxl，这里卖个关子，有兴趣的伙伴们可以去对比一下他当年的样子和现在的样子就知道了）的独特嗓音加上摇滚的支持，让这首情歌变得更加有感染力也更加带劲。\n说到这首歌成了我的摇滚乐的启蒙，Guns N\u0026rsquo; Roses自然而然地变成了我小时候一直到现在我最喜欢的一直乐队之一。但是如果让我选一首我觉得枪花最好的一首歌，那我不会选这首，而是November Rain。以后的推歌计划再谈谈这首歌。\n006 Bohemian Rhapsody 这首歌相信只要是喜欢摇滚的人都应该有所耳闻。对我来说他是我心中最伟大的摇滚曲目之一。\n话说上期lz讲了自己的摇滚曲目启蒙，其实除了枪花的歌，还有一首歌是我在没有真正听摇滚之前就已经听过的，那就是——We Will Rock You。估计很多小伙伴就算没有听过摇滚也听过这首歌吧。简洁而又有力已经刻在DNA里的鼓点，加上主唱牙叔（Freddie Mercury）极具穿透力的唱腔，让这首歌具有极强的感染力。\n而这首歌背后的乐队就是今天lz想分享的乐队——Queen。\n今天要推荐的歌我觉得是最伟大的一首摇滚曲目之一，也是我觉得是说起Queen就不得不说的曲目——Bohemian Rhapsody（波西米亚狂想曲）。\n整首歌其实是由几个风格很大的部分构成，其中有歌剧、摇滚等等很多元素。其实这也是Queen这个乐队的特点，他们一直在尝试不同的摇滚风格，所以很难把他们归为某一类的摇滚乐队。听完这首歌其实像看完一个奇幻剧一样，时而感人时而热烈。这首歌是我无论听多少遍，每次听都会沉浸进去的。\n除了很多不听摇滚的人也很熟悉的We Will Rock You，We Are the Champions以外，Queen还有很多的歌，也非常的好听。\nBass十分突出抓耳的Another One Bites the Dust（这首歌的Bass让人听了就会忍不住抖腿，因为是乐队的Bass手John Deacon写的）\nMV放飞自我的I Want To Break Free（一定要去看MV！！！！！MV内容完全对应歌名）\nLove Of My Life——一首情歌\nRadio Ga Ga——用了很多非传统的音效，应该是前卫摇滚了（据说也是Lady Ga Ga的取名来源）\nUnder Pressure——宝爷！！抽一期我也讲讲宝爷\n007 Walk On Water - Eminem lz初识说唱应该就是Eminem了吧。具体什么时候我记不得了，大概时初中的时候，那时候除了听马頔宋东野的民谣就是去找各种英文歌听了。然后就发现了Eminem，是Love the Way You Lie（爱你趟过的大马路）说起来挺搞笑，那时候被这首歌吸引最开始并不是因为Eminem的说唱，而是Rihanna的唱的部分23333。然后慢慢地就开始去发现去了解Eminem了。\n心路历程大概是：这个女歌手唱的太好听了，怎么还有个男的说唱，还是唱的好听。————\u0026gt; 慢慢开始期待这个男的Rap了，知道了这个男人叫Eminem ————\u0026gt; 开始去听他的其他的热门歌曲（如Not Afraid，Rap God，The Monster）————\u0026gt; 开始去了解这个男人的故事和歌，也开始慢慢喜欢上了说唱。\n真正让我喜欢上Eminem的歌应该是Stan，当初听到这个歌，大概意识到了原来说唱并不都是那种有着重重的鼓点，咬字铿锵有力的。在了解了Stan背后的故事之后也发现Eminem另一方面。这首歌歌词虽然是往来的信件，但是你并不会觉得他就没有押韵没有flow没有感觉，相反Eminem将歌词处理的非常的舒服，叙事非常的完整而且听感很Smooth。\n真正让我了解Eminem的是Lose Yourself和I Need a Doctor，在听了Lose Yoursel之后我就去看了8 Mile，知道了Eminem的一些过去的故事；而I Need a Doctor背后的故事也让我认识到了Eminem和Dr. Dre的故事。\n一直到这里我都觉得Eminem风格是很硬核很重的，直到我开始听他初期和Dre合作的歌如Without Me, The Real Slim Shady， My Name Is像是发现一个新的Eminem一样\n慢慢的后面就解锁了一些喜欢的歌如Marshall Mathers, White America, \u0026lsquo;Till I Collapse, My Dad\u0026rsquo;s Gone Crazy(Eminem和他女儿太可爱了)，Sing For The Moment（解锁了一个新的乐队Aerosmith），Mockingbird（这首歌词都快背熟了，Eminem太爱女儿了），Crack A Bottle，Beautiful（开头的Reacing Out Queen也唱过），Music Box，Cold Wind Blows，Lighters（火星哥 和 大五舅），Berzerk\u0026hellip;\u0026hellip;这些歌都是在我开始听Eminem那时候之前的专辑，然后我就开始期待这个男人的新专辑， 然后就等来了——Revival。\n当时一出来我就马上买来听了，整张听下来其实感觉没有以前的歌好听。但是第一首歌也是预告发的歌我其实还是挺喜欢的。认真看着歌词听下来还是挺伤感的，感觉Eminem好像遇到了中年危机，不过最后画风一转—— But as long as I got a mic, I\u0026rsquo;m godlike, So me and you are not alike, *****, I wrote STAN! 好家伙nb。今天标题选这首歌其实是因为这首歌对我一个不是很Stan的Eminem 听众来说是一个让我更加了解现在的Eminem的歌，所以把他拿出来作为标题。\n然后就是Kamikaze这张专辑了，整张专辑听下来都挺喜欢的，Eminem又回来了。\n然后就是MGK的diss，MGK这波反向追星太顶了，感谢他为我们贡献了Killshot这样的好歌。\n说在最后，其实说唱有时候有很多暴力色情元素在里面，有些歌歌词也不是都是很有营养的。但是说唱也有着它很理性很有思想的一面。我喜欢挺的说唱一种是听感很好，flow韵脚很好，这种我甚至不会去看歌词是什么，听起来舒服就完了。一种是歌词技术都很好，有思想性。所以大家理性听歌就行。而且很多时候歌词就算看了也不一定能看懂，因为有很多文化差异在里面，所以这一点其实国内的说唱就有很多我们能听懂而且有很好的我们自己的文化的东西，以后再来讲讲。\n我其实并不是一个真正的Stan，所以很多Eminem的歌也只是听着喜欢就去听了。今天只是讲一讲自己听过的和了解的Eminem。后面有机会再讲讲我听过的其他的欧美说唱和国内的说唱。\n008 陶喆 记得初中的时候，每周的周日下午都会坐并主任的车去学校，他副驾驶的储物箱里，有很多CD，厚厚一大叠。有一次上车后，他从里面拿出一张CD放进了车载CD播放器里，选了一首歌开始放。便是Melody - 陶喆。当时我还不知道这个歌手，也不知道这首歌背后的专辑，直觉得这首歌很好听，可以让晕车的我觉得好受一点。\n把这首歌作为标题其实是因为它是我最开始接触陶喆时第一首我喜欢的歌，直到如今还是很喜欢。不得不感叹陶喆的旋律真的太强了，陶喆的旋律加上伴奏，那种忧郁抒情一下就出来了。而中间加入的一段比较欢快，仿佛是在回忆过去的快乐，给整首歌增色不少。\n说回在班主任车上，我还迷迷糊糊晕着车，听着歌。音响里传来熟悉的却又有点陌生的旋律——“你问我爱你有多深，我爱你有几分”，还以为是哪个歌手翻唱的月亮代表我的心，仔细听发现与原曲有很大的不同，但是这样的不同仿佛给了舒缓浪漫的原曲增添了一些轻快，而且陶喆对中国风的理解和运用是很深的，这也得益于他的京剧演员妈妈。\n随后又是一首当时现在听到都觉得很好玩的歌，一开始就是母鸡在咯咯咯咯不停，然后是**“我有一只小毛驴我从来也不骑~”**。这首歌便是宫保鸡丁。\n说到这里我初中对那张专辑的印象也差不多了，相比许多听陶喆的小伙伴已经猜到是什么专辑了，这张专辑便是——《黑色柳丁》，可以说是华语约乐坛的一张神专了。后来长大了再去听了这张专辑，发现无论是从立意思想、旋律歌词、陶喆不同风格的尝试创新融合来说，都是一张很强的专辑。\n《黑色柳丁》里的歌其实很多都很好听/很有意思：重型摇滚的专辑同名曲黑色柳丁，反映现实的Dear God，搞怪的My Anata，还有很轻快的二十二……\n自从晕着车，听着歌发现了陶喆的歌以后，我也在其他不同的敌方陆陆续续发现着陶喆的歌，也让我慢慢发现这位华语R\u0026amp;B天花板。在古巨基的情歌王里发现了飞机场的10:30，在我是歌手听了胡彦斌和陶喆唱黑色柳丁，因为前奏吉他很好听去专门学会弹前奏的普通朋友……\n后来刷bilibili的时候，偶然发现了SOUL POWER LIVE 陶喆香港演唱会神级现场，真是太爱了。我已经刷了很多遍了这个演唱会，真希望我能穿越回去现场听一遍，不对应该是无数遍。这场演唱会里，陶喆将他以前的歌许多都做了很强很好的改编，甚至有些歌我觉得是超越专辑版的存在，听到就是赚到。\n之前看喜欢的一个UP分析陶喆的Susan说，实在佩服陶喆对中西音乐的理解和融合，太强了。\n009 Let It Go - James Bay 初中毕业偶然间，在日推里发现了这首歌。记得当时冰雪奇缘已经火很久了，所以每当我和朋友们安利这首歌，他们第一反应都会是冰雪奇缘的那首Let It Go。\n每次听这首歌的时候，总是很容易被James Bay的嗓音带入进去，其实我一开始包括大段时间听这首歌时，是并没有去认真去看歌词的（说起来我听大部分的英文歌时，都是很少去看歌词的，所以一首英文歌如果能在我的歌单的话，大概率是因为这首歌听起来很吸引我），也没太注意歌词讲的是什么，但是那时候就被James Bay的声音和歌曲的氛围吸引进去了。\n而现在去看了歌词，才发现副歌部分的Let it go主题的表达却有一种想要摆脱放手却难以割舍的无奈和发泄。而一直重复的萦绕的吉他伴奏，仿佛像是反映了歌曲中那种想要Let it go但是又仿佛难以摆脱的情绪。\n当然以我的性格，发现了一首喜欢的歌曲，当然是要去扒一扒这个歌手其他的歌曲。Hold Back the River, Running, Us也非常喜欢，整体停下来我感觉是一位有自己的风格的歌手，整体的感觉偏向于走心情绪但是却并不矫情。\n010 Pink Floyd 大概是高中时候，无意间听到了Comfortably Numb，我一直好奇为什么会突然听到这个歌，但就是一如我的耳朵，我就被深深的吸引了。当时英语还不太行的我看到歌名就被吸引住了，什么是舒适的麻木，可是听着听着仿佛好像理解了这种所谓的舒适的麻木，在我看来仿佛是一种对现实痛苦的无奈，麻木反而是可以让自己暂时脱离显示痛苦的一种舒适。而且歌曲的尾奏solo也非常非常非常的令人沉醉。\n在接触到这首歌之前，我对摇滚的感觉几乎都是那种直接迸发的激情，强烈直接的宣泄。但听到这首歌之后，我才意识到摇滚原来还可以这样，可以如此的表达一种情绪，不只是表达情感上的强烈宣泄；摇滚情感的表达方式也并不只是失真吉他重鼓点，还可以有这样多的声音，可以通过这样的声音营造如此的氛围。\n可以说Pink Flyod的出现改变了我对摇滚乐的狭隘认知。\n所以后面我去听了这个乐队的其他热门的曲子，其中Wish You Were Here又是一首不同于我以前认知的但是深深打动我的曲子，正如其名一样，这是一首表达对朋友的思念，希望他还在的曲子。后来去了解之后才知道这是纪念因为毒品精神状况变得越来越差最后不得不离队的前队员Syd，而真正让我理解到这句“Wish You Were Here”的，是这张专辑的另一首曲子——Shine On You Crazy Diamond。前成员Syd的名字就含在这首歌的缩写SOYCD里。而这首Shine On You Crazy Diamond (Pts. 6-9)，也是我最喜欢他们的一首，无论是器乐演奏还是歌词还是人声，无不让我每次听的时候都沉醉。\n在听了他们的热门的歌曲，发现都非常厉害之后，我就去听他们的热门专辑。于是又打开了一片新天地。\n其中我听过的最爱的几张应该是：\nThe Dark Side Of The Moon （相比许多人应该在不少地方见过这张专辑封面），Wish You Were Here，The Wall。\n这里面许多歌都值得静下来戴上耳机，去感受Pink Floyd熟练的运用各种乐器、效果以及人声编曲带来的立体的情绪化的感受。\n如果对这个乐队感兴趣的话可以看看这个UP的这个视频\n下期预告：可以在一年什么时候都听得到的古典入门协奏曲\n011 四季协奏曲 - 维瓦尔第 以前总觉得古典音乐仿佛是一种很难去听懂的类型，然后去找了个歌单听了听世界著名古典音乐，好多都很难听懂，便放弃了，对自己说，自己应该不适合听古典。但后来其实发现这样的原因可能有两点，一是自己了解的古典音乐不够，二是自己了解的音乐知识不够。大学的时候，又开始对古典音乐感兴趣了，原因可能是第一自己暑假学了吉他，开始对音乐有了更多的了解，二是自己选上了学校的二胡课，古典的知识又增加了。于是我就想，可能是自己当时打开古典的方式不对，一定有许多易于我们这些入门的听者接受的古典音乐，我感觉自己的方向找对了，于是便在知乎搜索了如下关键词“有哪些适合新人入门的古典音乐”，在看了几个回答后，我直呼“郭涛诚不我欺”，便开始了我听古典的历程。\n听了一些古典后， 我觉得古典有时候还是比较难懂的原因是，古典不像平时听的歌。大部分我们平时听的歌都有歌词和标题，能让我们快速的了解这首歌大概的立意和意象，所以我们可以很快的把歌曲和立意建立起联系从而快速理解这首歌。但是古典很多情况下就不同，没有歌词不说，有时候标题都只是一个序号。所以我们理解一首古典音乐有时候需要我们对这首曲子的创作背景和知识有所了解。\n而这次想推荐的是维瓦尔第的《四季》小提琴协奏曲。\n为什么想推荐《四季》呢，主要是因为这是我刚开始真正能听得懂的一首古典曲子。就如同它的标题一样，对这是一首标题音乐，协奏曲共分为四首单独的协奏曲组成，分别对应了春夏秋冬四个季节。之前说许多古典音乐没有标题，没有歌词而难以理解，但是四季不同，不仅有标题，而且维瓦尔第还给每一个乐章配上了一首１４行诗，方便我们理解曲意。简直是新手的福音有没有。\n带着主题和给的十四行诗去听的话，就很容易和意象对应起来了。这个时候你就会发现原来用乐器用音乐就可以把春夏秋冬不同的场景不同的感受描述的如此的形象。\n比如春的第二乐章维瓦尔第所给的诗句描述是“牧羊人躺在草地上, 忠实的牧羊狗在他身旁。百花盛开, 景色宜人, 树木轻轻摇晃。”带着这样的场景去听，给我的感受仿佛就是春天午后，晒着太阳任凭时间慢慢流逝。\n又比如夏的第一乐章，“\u0026ldquo;盛夏骄阳似火, 人畜口干舌燥, 杜鹃啭啼, 斑鸠与金翅雀也都在不停地吱吱叫。”仿佛就是夏天下雨前那种燥热来到了眼前。\n总的来说我觉得有了标题和十四行诗的加持，这首曲子变得非常容易代入，同时其音乐也有着极强的形象感，旋律也非常的动人。\n下期预告：一首关于河流的古典曲\n012 伏尔塔瓦河 《伏尔塔瓦河》是斯美塔那的代表作、交响诗套曲《我的祖国》中的第二首交响诗。\n我最开始听这首歌是因为一个讲解古典曲目的UP主的视频，在这个视频中他分析了《伏尔塔瓦河》每一个部分所描述的内容。所以听起来就和上一期所讲的《四季》协奏曲一样，很快的把歌曲和立意建立起联系从而快速理解这首歌。\n伏尔塔瓦河被看作是捷克的母亲河，而从这首歌里，可以很明显的感受到伏尔塔瓦河从两个源头发源，到最后逐渐消失在远方所流过的景色与人文。同时也可以感受到斯美塔那对于祖国的热爱。\n斯美塔那自己对于伏尔塔瓦河是这样形容的：“伏尔塔瓦河有两个源头——流过寒风呼啸的森林的两条溪水汇合成一道洪流，冲着鹅卵石哗哗作响，映着阳光闪烁光芒。它在森林中梭巡，聆听猎号的回音；他穿过庄稼地，饱览丰盛的收获。在它的两岸，传出乡村婚礼的欢乐声，月光下，水仙女唱着迷人的歌在浪尖上嬉戏。在近旁荒野的悬崖上，保留着昔日光荣和功勋记忆的那些城堡废墟，谛听着它的波浪喧哗。顺着圣约翰峡谷，伏尔塔瓦河奔泻而下，冲击着突岩峭壁，发出轰然巨响。尔后，河水更广阔地奔向布拉格，流经古老的维谢格拉得，现出它全部的瑰丽和庄严。伏尔塔瓦河继续滚滚向前，最后同易北河的巨流汇合并逐渐消失在远方。”\n总的来说从这首曲子中可以很明显的听出作曲家是如何利用各种乐器以及编排来表所要表达的情感、描绘所要描绘的景色的。\n下期预告：“重要的事从来都不耽搁”的中文说唱\n013 别怕变老 - 王以太、艾热 这次回到了中文说唱，在Eminem篇时，我说过有空说说国内的说唱，现在来兑现了。这首《别怕变老》可以说是今年我听过最好的一首中文HipHop歌曲，也是我觉得的一首很适合没怎么接触过HipHop的同学听的HipHop歌曲。首先要说的是这首歌的和声，可以说我听过的中文说唱里很少能听到有编排如此好的和声的歌曲，同时歌曲的编排也非常的精彩，开头的类似管风琴的音色、钢琴、吉他、副歌垫的bass都为这首歌增添了许多的魅力。其次是王以太和艾热的歌词，可以说是他们俩写给各自的爱人的一封信，也十分的浪漫。\n在The Park中王以太说到了这张专辑的一些感想，其中提到他说“有一个国外歌手曾说过现在许多rapper都在rap about cars, money, bit***s and drugs，没有人rap about love，为什么这样一个随处可见的主题没有人尝试……”\n再说说歌手王以太（艾热我听的不多，以后再说），我开始听王以太的时候是高中，那时候他还叫王闪火，还记得他的那句“王闪火，重要的事从来不耽搁”。如果认真算王以太应该到现在只出过三张专辑：《Feel \u0026amp; Sight》 ，《演.说.家》，《幸存者的负罪感》，以及一张Mixtape《闪火mixtape》。在我看来每一张专辑都是中文说唱中质量非常高的专辑。王以太的并不像其他很多rapper，有很多炫富、金钱没有营养的歌词，我听过的王以太的许多歌里，歌词中总能听到他许多思考的东西，或者是编排的很好的韵脚。所以说起来确实很适合刚接触中文说唱的朋友听听。\n似乎王以太是一名基督教徒，所以在他的许多歌里看到许多关于上天，上帝的词，同时他也有许多歌有着福音歌曲的元素。\n这里推荐下三张专辑里的一些歌。\n《Feel \u0026amp; Sight》：《目不转睛》与《Liquor Whisper》，两首情歌一首直白，一首低沉。《梦魇》。\n《演.说.家》：《阿司匹林》、《Real Me》两首剖析自己歌。\n《幸存者的负罪感》：《醉》，如命名，像是醉酒后的一些话语，虽然飘离但是有许多道理。《现实的生活》，一首写实的“现实”的歌。\n下期预告：SEE YOU COWBOY!!!!!!\n","date":"2021-07-06T10:41:22+08:00","permalink":"https://oddyti.com/post/music-share/","title":"音乐推荐计划合集"},{"content":" 高中某个假期，乘车回平武。从天亮到天黑，延山路前行。\n手机的屏幕刺出的光映在车窗上，又反射进眼里，在静谧的夜中显得格外刺眼。关掉手机，望向车外，本以为是会让人迷失距离的黑，可映入眼帘的却是满月的银。可又是这样的银，不得不让我失神。\n没有城市的喧嚣，不夜，这只咆哮着的猛兽，冲出了钢铁森林，却也不愿打扰这纯粹，本真的山野。与城市不变的深红如死水般的天空比起来，如此朦胧的银色山野天空，才更让人陶醉。\n同样是沿途的风景，相比白昼的开阔明朗，此时的夜景，似乎更能触动心中的那一丝宁静。月光洒在河面上，如同铺上了一层水银般，只剩光与影随着穿行在半山的车上下跃动。“浮光跃金，静影沉璧”。然比起金的华丽，银的朴素与淡雅，让人似乎永远不会厌倦。视野所及之景，就如同铅笔下简单却细腻的素描，光与影的交错，朦胧让人可望不可即。想伸手，却又无法触碰的美。\n斑驳的叶影在车顶上一点点划过，带起一丝丝回忆的涟漪。我望着窗外出神，车子穿行在群山中，却又穿行在回忆中。\n小时候每次出门，最让我牵念的，不只妈妈，还有那个静静卧在群山的襁褓下的家。所以每次出远门，或者仅仅是短途旅行，最爱做的最常做的，就是看周围的山，想象山后面的事情。常常会把家周围的山和它连起来。我想，若我翻过它，定会来到经常在家望到的不可及的山巅，在那里，站在那里，迎着清风，定会看到静静卧在山脚的家。那里，或许没有时空的阻隔，又或许无法触碰，但那总会成为离家游子与家联系起的一种方式。\n这样的习惯随着我，被带到了离家千里的他乡。尽管墨青的矮山变成了冷峻的陡峰，尽管四季常青变成了叶落草枯，然不变的仍是那颗渴望与家连系的心。愁如丝如雨，随我一路撒下，浸润在群山中。\n而现在那延伸到不远却又被黑夜吞噬的夜景，那朦胧有隐约的，更让我不能不再遐想。翻过那座，或许是那久违的家，或许那暗的背后，他正在静静地注视着，这久不归的游子。\n收拾思绪，夜，就在回忆与现实中穿行了。\n","date":"2021-04-06T15:16:53+08:00","image":"https://oddyti.com/post/far-away/cover_hu12577179360695988568.jpg","permalink":"https://oddyti.com/post/far-away/","title":"远望"},{"content":"一 2.24 有时候总感觉自己活在记忆里。总是想寻找记忆，寻找记忆中的感觉。如每次回老家，其实只是想见见记忆中曾经留下欢笑、泪水的地方，只是想看见回忆中疼爱我的七大姑八大姨，和我玩耍抢我玩具的表兄表妹。然而每次回老家，却总是物是人非，回不去了。老房子已经塞满了新家具，有的人不在了，有的人老了，就连无比亲热的表兄表妹也有了一道深沟。偶瞥见一些没变的旧物，心里无比激动，指给妈妈看，满怀期待，却引来不接和正常的目光。也许它只活在我的回忆里，或许，活在好好回忆里的又是另外一些事物。 有时寻找回忆却是想从现今的事物中找到甚至营造回忆中的事、感觉。然而常常事与愿违，怎么也找不到，却一直在寻找，就这样，寻找便成了回忆。或许将来某天，我又会寻找现在正在寻找的过程吧。 想到李荣浩的《老街》，马頔的《表》，宋冬野的《安和桥》。或许活在回忆中的人不止我一个吧。\n当时的本子上只是记录了月和日，2.24，我推测应该是高一的时候吧。过了这么久再看当时的这些文字只觉得好稚嫩哈哈哈。有些好矫揉造作。但是一些思考现在再看还是很有感触的。\n偶瞥见一些没变的旧物，心里无比激动，指给妈妈看，满怀期待，却引来不解和\u0026quot;这很正常啊\u0026quot;的目光。\n这句话，有时候作为大人，很难去设身处地的理解到小孩子的想法。一些小孩子很珍惜的东西和感情，可能对于大人来说只是一些再也正常不过的东西。很多时候小孩子慢慢长大，这种珍视的东西也会慢慢淡化，年龄越大越淡化。以前侄女因为类似的事情不被姐姐理解的时候，还没有长大的我就很能理解。 之前和瓜呆一起看玩具总动员、飞屋环游记。很是带入，那就是小孩子应该会有的小孩子才会有的那种想法、动作。不得不说皮克斯真是太棒了。二十岁的我们再看这样的电影时，就瞬间被带回去了，小时候那些玩具一定是活的，只是不会再我们面前表现出来，我们不知道而已。\n有时寻找回忆却是想从现今的事物中找到甚至营造回忆中的事、感觉。然而常常事与愿违，怎么也找不到，却一直在寻找，就这样，寻找便成了回忆。或许将来某天，我又会寻找现在正在寻找的过程吧。\n以前刚去平武的时候，总是觉得身在他乡，心里想着的总是故乡，经常在寻找一些和家乡很像的景色，然后幻想这就是故乡。比如看见一座高高的山，就会想着，要是我能翻过那座山，从山顶往那头山脚看去，一定是我的故乡。那时候总是觉得平武就是异乡。 可是后来离开了平武，甚至离开了绵阳，说起故乡，不知不觉的平武、在平武的感受也浮现了出来。现在想的，不只是雅安了。\n二 谈谈死亡 小时候第一次认识死亡，是我爷爷的母亲，我叫她祖祖。那时候我还小，许多事情都不记得了，现在再怎样仔细地搜寻寻觅，最终只有一些片段。 记得祖祖是很爱小孩的，我为数不多的记忆片段中，最多的便是祖祖那满是皱纹的笑容。她坐在藤椅上，宁静又慈祥。右手边放置着一根把手已经发亮的木拐杖。还记得拐杖上雕刻了一个龙还是什么动物，也不知道是什么木头。那根拐杖就那样静静地陪着祖祖，也不知道过了多久。祖祖宗时穿着一身朴素的蓝色布衣。她不爱美吗？或许在她的这个年龄最爱的是孩子吧。 每次我和堂哥去看她，两声\u0026quot;祖祖\u0026quot;，总能让她脸上的皱纹掀起弧度，露出那秃秃的牙床。这时候她便会扶着藤椅慢慢地站起来，拄着拐杖，带着俩小屁孩，走到她的房间去了。她爱孩子，会把她儿女孝顺她的水果零食，送与我们两个小孩。或是沙琪玛之类的零食，或是苹果之类的时令水果。所以每次我和堂哥去看她，定不会空这手回。妹妹我们开心地吃着水果、零食，祖祖总会笑眯眯地看着我们，在她眼中，孩子的每一个动作都是很美好的吧。 祖祖就这样住在她的老屋里，平时就坐在和她一样年老的吱吱呀呀的藤椅上，看着太阳东升西落，看二送来来往往。或许她真的年老了，又或许是她已经看到了儿孙满堂，在某天，她放下了那根拐杖。 那是我第一次认识死亡，那时，祖祖的棺材放在二爷家的堂屋里，院子里。她的孩子、孩子的孩子，头上戴白，跪坐在院子里，堂屋前。那时我见过孝子最多的，跪满了半个院子。我也学父亲，头戴孝，跪在他旁边。我不记得是否有人在哭，也不记得那天父亲爷爷的表情是怎么样的。我只是静静地和他们跪在一起，不知道为什么要这样做。祖祖下葬时，我和几个小伙伴看热闹似的跟了去。漆黑的棺材，用长长的竹竿抬着，沿着山路一步一步地走向坟地。我无从知晓祖祖是哪里的人，所以无法判断她是否是落叶归根，但至少，她实在三代子孙的陪同下走的，她是含着笑走的。下葬的具体细节我记不太清楚了，之后，每年都会和爷爷一起去给她烧点纸钱，希望以这样的方式祝愿她能在另一个世界快乐的活着。\n应该和上一篇是一个同一个学期写的。那时候还记得好多细节，现在我都忘记了许多了。其实那个时候什么都不懂，由于相隔三代人，对于祖祖的亲亲也并不是很深，所以对于死亡并没有很直接的感受。 还记得那时候葬礼请了喷火的表演，我和堂哥看了之后便想回家试试。我倒了一杯酒，堂哥拿着打火机，他点我喷。一口酒喝到嘴里，还没点燃打火机，便喷了出来，太辣了。便不了了之。现在想来还好当时没有尝试，不然太危险了。\n","date":"2021-03-21T14:25:49+08:00","permalink":"https://oddyti.com/post/high-school-memories/","title":"重拾"},{"content":"4399，yyds 咱先不说4399里的游戏来源是否合法，但它的确是满满地装着同年的许许多多的美好回忆。\n第一次接触4399，是去了平武时候，去一个老师家里玩（为什么去老师家呢，我姐姐是老师，所以很多时候她的朋友圈都是老师）时候，他们的儿子（比我大两三岁吧），带着我一起揭开了4399的神秘面纱。\n我记得第一个游戏应该是黄金矿工吧，只有简单的两个操作键，上和下，上是用炸弹炸掉抓到了石头等不值钱的东西；下是伸出钩子抓东西。目的就是在规定时间内抓到尽可能值钱的东西。这个游戏虽然现在看起来很简单无聊，但在当时对于刚知道电脑是什么的我简直是神作好不好。（机缘巧合下有幸和小🍐一起在蓝田的自助打印机重温了一下）\n自那以后，我不仅记住了黄金矿工这个游戏，更是记住了4399这个阿里巴巴宝库。回到家，便在姐姐的电脑上百度4399，然后点击进去（很久之后我才学会输网址进4399），开始在游戏的海洋里畅游。并且发现了许许多多的好玩的游戏：\n首先让我记忆犹新的是Nitrome的游戏，当时我发现了有一些像素风（当时也不知道那叫像素风）的游戏很好玩，而且开头都有一个标识叫Nitrome。估计许多小伙伴也玩过他们家的游戏，比如\n当时怎么也玩不明白不知道怎么过关旋转赛车，开无敌版疯狂拆迁的高楼爆破，无论是一个人还是两个人都可以玩的很开心的萌萌双箭头（也翻译成肥猫天使虽然不我觉得这个翻译很丑），蒸汽要塞，屠龙勇士，肥猫闯山洞，终极忍者等等。\n除了这些还有一些游戏比如极限越野（满足了我的赛车空翻梦），Q版泡泡堂，森林冰火人（无人不晓吧这个）……\n另外还有一个系列我很喜欢，就是生命之岛，还有和它同一个系列的山谷建设，他们都是多结局的游戏，不同的选择会有不同的结局，好评的是，4399每个游戏下都会有评论模块，这里你可以找到很好的攻略。\n还有许多的优秀游戏我就不一一列举了。\n页游——一个全新的时代 记得小时候在4399的主页面探索的时候，偶然间发现了一个叫“弹弹堂”的游戏，点进去发现页面并不是以前的界面，而是在不断加载许多东西，加载完成后，还让我登陆/注册账号。在用QQ号作为账号注册了一个4399账号之后便开始了游玩。\n弹弹堂的发现，开启了页游新时代。摩尔庄园、赛尔号、奥拉星……\n我记得刚开始玩赛尔号的时候，选的是水系精灵伊尤，后面我就不记得了233333。\n不得不说现在再来看，巴鲁斯小时候真的很可爱的，按估计着我小时候选择它的原因就是因为这个吧\n插叙——QQ游戏与QQ宠物 花开两朵，各表一枝。在探索4399的同时，我也发现了QQ游戏平台。但我对于斗地主什么的棋牌类游戏是没有什么兴趣的，吸引我的是像QQ雷电这样的游戏。\n可惜现在它已经关服了。\n同时，由QQ游戏大厅，我继而发现了QQ飞车、CF等网游。但是年少的我技术太菜（童年 CF被虐的经历，一直在让我觉得我FPS游戏不行直到后来接触了一款叫——RushBCSGO的游戏），在玩了一会之后，就转而投向单机游戏的怀抱了。\n同时，从一开始注册QQ账号后，变发现了一个好玩的游戏——QQ宠物。最开始还是一只小企鹅，每天都会慢慢穿过企鹅社区，去做蛋糕。后面有了新的宠物——一只小熊。\n「单机时代」 之所以称为「单机」，是因为在那个盗版盛行年代，我并不知道游戏还需要买。以为他们和网上的电影资源一样，找到下载下来就可以玩。而由于盗版的原因，也导致了这些游戏不能联网对战，所以就成了「单机」。后来高二高三接触到了stean，才开始慢慢在steam上买游戏玩。\n咱说回开头提到的我姐姐笔记本里的仨游戏——魔兽争霸3、暴力摩托、抢滩登陆。\n小时候玩魔兽争霸3，一直没有玩会，还记得自己打到了哨兵战役（也就是暗夜精灵和伊利丹的战役那里），就打不下去了。而剧情啥的也没看懂（我都不知道有剧情）。而暴力摩托和抢滩登陆更是无脑冲冲冲和无脑突突突就行。\n后来我发现了还有对战平台这一东东，于是变在QQ对战平台上和别人一起玩起了魔兽争霸3的地图。最爱的还是一个塔防地图（忘记叫什么名字了）。\n然后玩腻了这仨游戏后，由于不知道还有什么新的单机游戏，也不知道怎么下载，于是我继续回到了4399的怀抱。\n后来，因为一次偶然的原因，姐姐的电脑坏了，在拿给一个亲戚修好之后，打开电脑我发现，桌面多一个图标，双击打开，出现一个让我现在都还记得的画面，而这个画面，给我打开了一扇新的大门。\n「CALL OF DUTY」FPS的启蒙 一切的一切直到姐姐的笔记本坏了，因祸得福，笔记本我姐夫的弟弟——强哥拿去修了。还回来时，变发现桌面多了一个带像勋章一样的星星图标，满怀好奇双击打开，发现是全屏——肯定是新游戏。随着开头几个乒乓球（后来知道应该是电子）一样的东西飞速旋转，最后呈现了一个logo：\n然后就是这个画面：\n相信有人猜出来了，它便是FPS游戏中的经典系游戏——使命召唤。\n年幼的我，被一款03年出品的游戏深深的吸引着。直到后来，我学会了自己在网上找资源后，便陷入其中无法自拔：使命召唤1（包括它的两个资料片）、使命召唤2。\n由于使命召唤没有在pc端发行第三部，于是我通关了1、2后，在网上找到了一个里程碑式的神作——使命召唤4：现代战争。\n年幼的我，被其代入感极高的关卡和配乐，精美的画面深深的震撼了。以至于在我姐的电脑几乎带不动情况下（我估计当时只有20-30帧，后面双狙人那一关过不去看网上的视频还纳闷为什么别人的游戏真么快，而我的像慢放了一样），我还玩通关了，而且还二周目去搜集满了笔记本。\n随后在玩使命召唤5：战争世界时，发现电脑竟然蓝屏了，才意识到电脑带不动了。也就被迫遗憾地停下了追随使命召唤作品的步伐。\n在后来偶尔去网吧消遣的时候，也会零零散散地在网吧的电脑里玩一下使命召唤其他系列作品，但是网吧里比不上自己在家里的时候，总觉得没有很强的代入感。而且也不是每个网吧电脑里都会装上使命召唤，有的装的是6，有的装的是8，有的装的是黑色行动系列……所以没怎么玩明白。\n直到高中毕业后，有了自己的电脑后，我才重新神作4代开始，重玩以前没有好好玩的系列作品。\n现代战争系列（4、6、8），使命召唤5、黑色行动系列（7、9、12）等等。\n使命召唤的出现，也让我喜欢上了这种代入感强的第一人称射击游戏。\n在玩使命召唤的同时，我也开始寻找游玩其他优秀第一人称射击游戏（单机游戏因为我比较菜）。如荣誉勋章系列、泰坦陨落。\n「Half Life \u0026amp; Portal \u0026amp; Left 4 Dead」——不会数三的G胖 记得刚接触steam不久，就迎来了v社自家游戏的捆绑包打折，30十多块（我记得是）买了一大堆老旧游戏，但其中有几款游戏很耐玩，他们分别是：\n物理学圣剑出处——半条命（Half Life）（其实是半衰期）\n脑洞打开——传送门（Portal）\nMOD之路——求生之路（Left 4 dead）\n但是这几款\n87佳作有第一部、第二部之后就没有第三部了（这也是标题不会数三的G胖的由来）\n「Need For Speed」每个男孩都有的赛车梦 又有哪个男孩不爱车呢\n记得小学是时候，小伙伴给我说，他下好了一个游戏叫极品飞车10。然后后来我去他家玩的时候，在他家的电脑上玩了玩，然后就一发不可收拾。回去之后马上找到资源开始下载。\n从那时候开始，便爱上了这款可以开车，可以改装，可以漂移的赛车游戏。10代卡本峡谷的手感是很硬的，而且年幼的我技术很菜，所以往往通不了关，于是我就下载网上的完美存档，去体验那些高级的车。一段时间后，10代玩腻了。既然又10，那么肯定有123456789……所以我去网上找，最终觉得9代画风喜欢，画质也不是很差。于是同年的我继使命召唤4之后，又有幸地接触到了第二款我奉为神作的游戏——极品飞车9：最高通缉（Need For Speed: Most Wanted）。\nBMW M3永远的神！\n游戏里我最喜欢的是日系车，马自达、三菱……总是给它们加上大大的尾翼。还喜欢红黑配色，红色车身，车轮黑色。\n之后当然和使命召唤一样，9、10之后我就开始探索新的作品。NFS11、NFS12（这代优化好，但是不好玩）、13（变速太硬核玩了一会就弃坑了）。\n然后就是另一款神作：Need for Speed：Hot Pursuit，但是遗憾的是，由于姐姐的电脑带不动，当时我是无法体验了。直到后来才在表哥的电脑上体验到。\n后来有了自己的电脑，又相继玩了16（亡命天涯）、17（新最高通缉）……\n再后来在烂橘子上买了极品飞车20：复仇（Need For Speed：Payback），而且那时候有了Xbox手柄，于是开始开开心心用手柄玩着新作。\n但是极品飞车19一直吸引着我，因为这一代的漂移非常的帅，而且改装系统又回到了9代那个改装系统，并不是之后的什么车就是什么手感的那种，而是什么车都可以通过调教改装调出自己的手感。\n19还有许多人的漂移神车——AE86（我刚开始玩游戏就攒钱买了一辆2333）\n所以最终我还是入手了极品飞车19（Need For Speed），这一代像是对9代和10代的致敬，标题也是没有副标题，像是重启整个系列。\n入手后，发现这代上手很难，要想实现很好的漂移，一是要不断调教你的车子，前后胎压、悬挂、刹车强度等等眼花缭乱的参数都会影响到车子的操控；二是要想很流畅舒服的漂移，需要手动换挡，这对于以前从来都是自排的我无疑是一个很大的挑战。\n于是我开始练习手动挡位，什么时候该升档，什么程度的弯道该用什么挡位过，慢慢的经过练习，我终于掌握了手动档。在熟悉了之后，我就开始在19代的山路里肆意狂飙了。\n「Grand Theft Auto」——又名还不出6 从小时候第一次玩到网吧的罪恶都市，到后来自己下载游玩的圣安地列斯，再到骨折买的GTA5，GTA已经在我的游戏游玩史上留下了不可磨灭的印迹。\n我也深深被每一代的故事所吸引着。尤其是CJ的故事，小时候由于玩不懂，很多地方剧情都没有看明白，长大了再去玩的时候才发现这个故事很有趣。\n「Red Alert」经久不衰的即时战略 Sir,Yes sir! Our base is under attack! Building\u0026hellip; Construction complete\u0026hellip;\n相信很多小伙伴都对这些语音不陌生，甚至可以说是刻在DNA里了。没错这些台词就是来自于许多人同年都玩过的一款游戏——命令与征服：红色警戒2。\n小时候也是玩的是共和国之辉（一个国人自制的mod），在没有过场动画的情况下，打完了战役。剧情一概不懂。\n慢慢后来长大后，才知道原版的红警2是有过场电影的，于是下载了完整版的版本，从头开始完战役。这下才懂了红警的剧情。后来又玩了红色警戒3（EA并不成熟的一个续作）。\n小时候玩了即时战略除了红警之外，还玩了英雄连（Company of Heroes）。\n至于我是怎么发现英雄连这个二战主题的即使战略游戏的，还得从使命召唤1说起。小时候玩了使命召唤1、2之后，便对二战题材的游戏有了浓厚的兴趣。之后又发现了被我奉为神作的电视剧——兄弟连（Band of Brotherhood），在百度搜索兄弟连的游戏时，发现了英雄连这款游戏，便下载下来，打完了战役。\n这里强推我最喜欢的两部战争类的电视剧：兄弟连（Band of Brotherhood）和我的团长我的团\n之后也尝试过星际争霸、命令与征服，但是都不太喜欢。\n「Assassin’s Creed」万物皆虚，万事皆允 其实Assassin的意思是ass ass in!\n高二高三的样子，知道了有steam这样的平台，但是那时候也没有自己的电脑，于是便开始在一些游戏打骨折的时候入手屯着。我记得我入手的第一款游戏就是刺客信条2（Assassin\u0026rsquo;s Creed II）\n从此便开始了屯刺客信条的历程，陆陆续续玩了兄弟会、启示录、无双信条3、刺客信条叛变、（Bug命）大革命和奥德赛。\n屯了之后，也是偶尔能在网吧体验下（老色鬼）艾吉奥的成长故事。后来有了手柄和电脑后，才继续慢慢玩了剩下的几代。\n「Tomb Raider」——走哪儿拆哪儿的劳拉 记得有一次在网吧网游戏的时候，看见单机目录有一款叫古墓丽影：崛起的游戏，于是就点开玩了玩。便被漂亮的风景、和没有什么违和感的国语配音吸引了。\n后来就陆续玩了重启后的几代。解密加动作加射击的玩法很是好玩。也见证了走哪里拆哪里的劳拉的成长。\n「The Witcher 3: Wild Hunt」来一局昆特牌吧 在听了很多遍巫师3是多么神作之后，我在它打骨折的时50多块入手了。\n与以往我玩过的一些无脑突突突的游戏不同，巫师3是那种需要玩家沉下心慢慢体验的游戏。刚开始玩的时候，会觉得有点玩不下去，尤其时到威伦那个充满着压抑的土地上，好多次我都想要退坑了，但是我一直想着神作应该会有它神作的地方，于是便继续玩了下去。\n之后我就真香了，喜欢听着“The Fields of Ard Skelling”，在史凯利杰群岛爬山滑雪闲逛；石之心的故事真的很打动人；最终还是选择了叶奈法（顺便吐槽美剧里的选角）；\n巫师的剧情设计真的太好了，各种支线剧情也在用心的设计。以至于玩了巫师3后，再去玩奥德赛发现除了动作系统很喜欢以外，剧情什么的玩不下去。\n而且巫师3的配角刻画的都非常的棒，很有特点也很真实。\n没有看攻略，最后很高兴打出来的是我很喜欢的结局：希里猎魔人；叶奈法陪伴；凯瑞丝当上史凯利杰群岛。\nPS：猫派的我一周目狄拉夫打了好多好多遍才过23333）\n「Minecraft \u0026amp; Terraria」——快乐沙盒 其实把这俩归于单机并不是很恰当，毕竟我的世界和泰拉都可以和小伙伴联机一起玩，并且玩的很开心。\n**我的世界（Minecraft）**我是从小就听闻它的大名，一直到大学才开始认真玩。记得自己的生存卡在了史莱姆农场了，就没有玩了。\n然后就是和小🍐一起快乐联机，造了自己的樱花树屋，养猪，养熊猫。（在我们俩赶小猪进猪圈的时候，有两头小猪一起进门，却卡在了门上，这就是卡门吗2333333）\n后来自己玩空岛One Block生存，好不容易到了岩浆的进度了，结果自己失手让岩浆流了出来，烧掉了我的大部分物资，就伤心的退游了😣。\n**泰拉瑞亚（Terraria）**是我高中的时候，室友向我安利的，那时候我们寝室偷偷不交手机（高中每周开始要上交手机，每周结束会发给我们），然后几个人一起泰拉瑞亚联机（是的，我先接触的是手游版本的），同时那个通关过电脑版本的室友就当了我们的军师。\n大学steam买了Terraria，然后考试周前整个寝室就沦陷了23333 。\n后来假期我自己通关了，打了月总。\n一些玩过但是没有单独拿出来说的游戏 盟军敢死队（挺难的），杀手47（光头换装游戏），人类一败涂地（快乐联机），分手厨房（没有传说中那么“分手”），魔能2（很好玩的魔法组合游戏），迈阿密热线（后面太难了没玩下去，但是很好玩），狙击精英系列（爆弹精英），正当防卫（过当防卫），孤岛惊魂系列（越来越不好玩的育碧式开放世界），虐杀原形1，光明记忆（优秀国产），瘟疫公司（结合时事233），合金装备（没有6，永远的痛，小岛太强了），文明6（一局太长了），模拟人生，过山车大亨（打造自己的游乐园还是很有意思的），火影忍者究极风暴（有手柄才好玩），逃脱者2（和小伙伴联机），无限法则（不错的国产吃鸡）……\n网游 最开始接触的网络游戏应该是CF吧，年幼的我发现自己FPS和同龄人比起来差了许多，以至于后来我都很少玩FPS的网游。\n「CF」——三亿鼠标的枪战梦想（除我以外） 小时候，和小伙伴一起去他堂哥家玩的时候，看见他堂哥在玩一款枪战游戏，一问之下才知道是大名鼎鼎的CF穿越火线。回到家里，我便开始自己下载（仍然记得CF安装界面是一个拿着SVD的潜伏者）玩了起来。但是太菜了，一直玩不开心。就弃坑了，网络打枪打不过别人，我还有使命召唤呀，于是转而去玩COD去了。\n「LOL」——MOBA俺永远的痛 我记得好像是在小学毕业的时候，在镇上一位大学返乡的大哥哥带领下接触了一款从未见过的新游戏——LOL，新手教程是寒冰射手我记得，后来也自己玩，但是一直还是没有我的小伙伴们玩的好。高中之后也基本不玩了，所以我对lol也就是玩过而已（EDG时代比赛倒是常看，还记得那时候的阵容是扣肉、厂长、胖、meiko、deft，EDG时代结束后我就没怎么看了，后来由于没玩，想要继续看比赛发现已经看不懂了）\n大学在室友的带领下，想要重新拾起MOBA类游戏。（室友梦三国（一个和dota1很像的游戏）从小玩到大，至今还在玩）但是尝试了一番之后还是放弃了。所以俺是真的不太擅长这类游戏。\n「CSGO」——真正摸到FPS的门槛 不知道什么时候开始，在bilibili看视频的时候，慢慢会看到有弹幕发“哪都有闸种”，抱着有梗就想了解的心态我去搜了一下，于是就发现了茄子以及CSGO这款游戏。\n于是慢慢的，我就爱上了——看白给秀23333。\n当然慢慢白给秀看多了自己也想白给白给吧，又正好csgo那时候已经免费了，于是就尝试了尝试，结果发现还是被虐😢。但这时的我已经不是当年懵懂无知的我了，我已经是一个会学习的人了。于是我就开始去B站搜索csgo新手入门，才知道什么是急停，什么是投掷物，什么时候该用什么枪。也才知道怎样选择适合自己的准心，怎么调整适合自己的灵敏度与dpi。也学会了用创意工坊的地图练枪。\n讲过慢慢的学习以及练习之后，我发现自己竟然也能好好的玩这个游戏了，玩休闲模式/军备竞赛竟也能拿到积分第一。于是我发现FPS并非不适合自己。\n在觉得自己学有小成之后，我才敢打开竞技模式（由于看了许多go的视频，所以知道竞技模式需要会一点投掷物和其他的知识技能，所以我一直没敢玩竞技，想着等自己学了一些之后才去）。\n第一把竞技还是很紧张，以至于忘记了竞技是有友伤的，手枪局赢了后不小心顺手打了下队友头被骂了😖。\n但慢慢的就逐渐放松了，最后断断续续打完10把定级赛（期间也拉上我的高中好友一起入坑，带他跑图，教他投掷物，后来他已经远远超过我了2333），定级到黄金1这对于我来说已经是很大的鼓励了2333。\n但是后来没有什么集中的时间玩，段位也隐藏了。\n同时，我已经不满足于白给秀了，也开始去看茄子的直播录像，去看一些主播解说比赛。也了解了许多战队（最开始当然是了解当然是（干拉）天禄战队，后来是A队，再后来NAVI等等。\n「Battlefield」——田野里打架的快乐 小时候自己探索时，接触到了一代神作战地2，在快乐玩耍＋探索的期间，学会了自己找补丁解锁64人大小的地图，自己找补丁解锁枪支和自己去按照教程找到数据修改武器伤害。慢慢的就玩腻了。但是又不知道怎么联机（当时还没有意识到自己玩的时盗版），也不知道在哪里能玩到正版。\n后来高中毕业看见战地1打折，于是就入手了。\n此时的我经历了csgo的锻炼，已经有很好的fps能力了，很快就上手了这个突突突的游戏，并且很多时候能在记分板上排进前10。\n战地一是我觉得（相比于战地其他系列）背景音乐以及战争氛围刻画的最好的，每次开始的时候，背景音乐加上冲锋的哨子总让人热血沸腾。\n「Apex」——快节奏的吃鸡体验 烂橘子出品的吃鸡游戏，和泰坦陨落一样的世界观和引擎。快节奏。和好朋友一起玩了不短的时间。\n谨以此文怀念下童年快乐的游戏时光，和陪伴我长大的游戏以及陪我一起玩游戏的伙伴们。\n","date":"2021-01-30T17:04:30+08:00","image":"https://oddyti.com/post/child-hood-games/cover_hu3923881466051212588.jpg","permalink":"https://oddyti.com/post/child-hood-games/","title":"那些陪我长大的游戏"}]